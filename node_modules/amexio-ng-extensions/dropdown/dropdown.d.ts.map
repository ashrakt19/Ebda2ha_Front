{"version":3,"file":"dropdown.d.ts","sources":["dropdown.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit } from '@angular/core';\nimport { FormInputBase } from \"../baseclass/form.base.class\";\nimport { CommonHttpService } from \"../common.http.service\";\nimport { ControlValueAccessor } from \"@angular/forms\";\nexport declare const CUSTOM_DROPDOWN_CONTROL_VALUE_ACCESSOR: any;\nexport declare const BASE_IMPL_DROPDOWN_INPUT: any;\nexport declare class DropDownComponent extends FormInputBase implements OnInit, ControlValueAccessor {\n    private amxHttp;\n    dataReader: string;\n    httpMethod: string;\n    httpUrl: string;\n    displayField: string;\n    valueField: string;\n    data: any;\n    multiSelect: boolean;\n    searchBox: boolean;\n    width: string;\n    onSingleSelect: any;\n    onMultiSelect: any;\n    multiSelectValues: any[];\n    filteredOptions: any[];\n    responseData: any;\n    nonFilteredRowData: any[];\n    constructor(amxHttp: CommonHttpService);\n    ngOnInit(): void;\n    setData(httpResponse: any): void;\n    /**\n     * use it to fire external model changes and reflect in dropdown\n     * @param event\n     */\n    onChange(event: any): void;\n    /***\n     *  use it to detect user selection changes and bind that to Model\n     * @type {string}\n     */\n    onUserSelectionChange(value: any, display: any, rowData: any): void;\n    /**\n     * Show Multi-Selected Value's Display Field\n     * @param multiSelectedValues\n     */\n    getMultiDisplayField(multiSelectedValues: any): any;\n    /**\n     * Show Single Selected Value's Display Field\n     * @param selectedValue\n     * @returns {string}\n     */\n    getDisplayField(selectedValue: any): string;\n    onDropDownSearchKeyUp(event: any): void;\n    private innerValue;\n    private onTouchedCallback;\n    private onChangeCallback;\n    value: any;\n    onBlur(): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n}\n"]}