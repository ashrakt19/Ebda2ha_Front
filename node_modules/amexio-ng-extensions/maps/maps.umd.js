(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/Observable')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs/Observable'], factory) :
	(factory((global.maps = {}),global._angular_core,global._angular_common,global.rxjs_Observable));
}(this, (function (exports,_angular_core,_angular_common,rxjs_Observable) { 'use strict';

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var MapProperties = (function () {
    function MapProperties() {
    }
    /**
     * @return {?}
     */
    MapProperties.prototype.ngOnInit = function () {
    };
    return MapProperties;
}());
MapProperties.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'amexio-map-properties',
                template: ""
            },] },
];
/**
 * @nocollapse
 */
MapProperties.ctorParameters = function () { return []; };
MapProperties.propDecorators = {
    'chartBackgroundColor': [{ type: _angular_core.Input },],
    'leftPosition': [{ type: _angular_core.Input },],
    'topPosition': [{ type: _angular_core.Input },],
    'chartWidthInPer': [{ type: _angular_core.Input },],
    'chartHeightInper': [{ type: _angular_core.Input },],
};

/**
 * Created by pratik on 17/8/17.
 */
var MapLoaderService = (function () {
    function MapLoaderService() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap'
        };
        this.googleScriptLoadingNotifier = new _angular_core.EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    MapLoaderService.prototype.loadCharts = function (chartName) {
        var _this = this;
        return new rxjs_Observable.Observable(function (observer) {
            _this.loadScript().subscribe(function (val) { return console.log(); }, function (error) { return console.error(error); }, function () {
                _this.loadRequiredChart(observer, chartName);
            });
        });
    };
    /**
     * @return {?}
     */
    MapLoaderService.prototype.loadScript = function () {
        var _this = this;
        return new rxjs_Observable.Observable(function (observer) {
            if (!_this.isScriptLoading) {
                //check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    //check if chart package has been loaded using chartPackagename ?
                    _this.loadBaseChart(observer);
                }
                else {
                    _this.isScriptLoading = true;
                    var /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = function () {
                        _this.isScriptLoading = false;
                        _this.googleScriptLoadingNotifier.emit(true);
                        _this.loadBaseChart(observer);
                    };
                    script.onerror = function () {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                    if (loaded) {
                        _this.loadBaseChart(observer);
                    }
                });
            }
        });
    };
    /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    MapLoaderService.prototype.loadBaseChart = function (observer) {
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(function () {
            observer.complete();
        });
    };
    /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    MapLoaderService.prototype.loadRequiredChart = function (observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { 'packages': [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(function () {
                observer.complete();
            });
        }
    };
    return MapLoaderService;
}());
MapLoaderService.decorators = [
    { type: _angular_core.Injectable },
];
/**
 * @nocollapse
 */
MapLoaderService.ctorParameters = function () { return []; };

/**
 * Created by sagar on 10/8/17.
 */
var GeoChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function GeoChartComponent(loader) {
        this.loader = loader;
        this.displayCountryName = false;
        this.id = 'amexio-map-geo-chart' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    GeoChartComponent.prototype.drawChart = function () {
        this.geomapData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            displayMode: this.displayCountryName ? 'text' : null,
            region: this.regionCode ? this.regionCode : null,
            backgroundColor: this.backgroundColor ? this.backgroundColor : null,
            datalessRegionColor: this.datalessRegionColor ? this.datalessRegionColor : null,
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
        };
        this.chart = new google.visualization.GeoChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.geomapData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GeoChartComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    GeoChartComponent.prototype.ngAfterContentInit = function () {
        this.chartAreaArray = this.chartAreaComp.toArray();
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    GeoChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('GeoChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    return GeoChartComponent;
}());
GeoChartComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'amexio-map-geo-chart',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\"\n      >\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
GeoChartComponent.ctorParameters = function () { return [
    { type: MapLoaderService, },
]; };
GeoChartComponent.propDecorators = {
    'width': [{ type: _angular_core.Input },],
    'height': [{ type: _angular_core.Input },],
    'data': [{ type: _angular_core.Input },],
    'displayCountryName': [{ type: _angular_core.Input },],
    'regionCode': [{ type: _angular_core.Input },],
    'backgroundColor': [{ type: _angular_core.Input },],
    'datalessRegionColor': [{ type: _angular_core.Input },],
    'chartAreaComp': [{ type: _angular_core.ContentChildren, args: [MapProperties,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var MapTitleComponent = (function () {
    function MapTitleComponent() {
    }
    /**
     * @return {?}
     */
    MapTitleComponent.prototype.ngOnInit = function () {
    };
    return MapTitleComponent;
}());
MapTitleComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'amexio-map-title',
                template: " "
            },] },
];
/**
 * @nocollapse
 */
MapTitleComponent.ctorParameters = function () { return []; };
MapTitleComponent.propDecorators = {
    'title': [{ type: _angular_core.Input },],
    'titlePosition': [{ type: _angular_core.Input },],
    'titleColor': [{ type: _angular_core.Input },],
    'titleFontName': [{ type: _angular_core.Input },],
    'titleFontSize': [{ type: _angular_core.Input },],
    'isTitleBold': [{ type: _angular_core.Input },],
    'isTitleItalic': [{ type: _angular_core.Input },],
};

/**
 * Created by sagar on 18/8/17.
 */
var TreeMapComponent = (function () {
    /**
     * @param {?} loader
     */
    function TreeMapComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-map-treemap' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.drawChart = function () {
        this.treemapData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.mapTitleComponent ? this.mapTitleComponent.title : null,
            titleTextStyle: this.mapTitleComponent ? {
                color: this.mapTitleComponent.titleColor ? this.mapTitleComponent.titleColor : null,
                fontName: this.mapTitleComponent.titleFontName ? this.mapTitleComponent.titleFontName : null,
                fontSize: this.mapTitleComponent.titleFontSize ? this.mapTitleComponent.titleFontSize : null,
                bold: this.mapTitleComponent.isTitleBold ? this.mapTitleComponent.isTitleBold : null,
                italic: this.mapTitleComponent.isTitleItalic ? this.mapTitleComponent.isTitleItalic : null
            } : null,
            minColor: this.minColor ? this.minColor : null,
            midColor: this.midColor ? this.midColor : null,
            maxColor: this.maxColor ? this.maxColor : null,
            headerHeight: 15,
            fontColor: 'black',
            showScale: this.showScale ? this.showScale : false,
            maxPostDepth: this.maxPostDepth ? this.maxPostDepth : 1
        };
        this.chart = new google.visualization.TreeMap(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.treemapData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TreeMapComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.ngAfterContentInit = function () {
        this.mapTitleArray = this.maptleComp.toArray();
        if (this.mapTitleArray.length == 1) {
            this.mapTitleComponent = this.mapTitleArray.pop();
        }
    };
    /**
     * @return {?}
     */
    TreeMapComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('TreeMap').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeMapComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return TreeMapComponent;
}());
TreeMapComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'amexio-map-treemap',
                template: "\n    <div [attr.id]=\"id\"\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\"\n    > <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n    </div>\n    </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
TreeMapComponent.ctorParameters = function () { return [
    { type: MapLoaderService, },
]; };
TreeMapComponent.propDecorators = {
    'width': [{ type: _angular_core.Input },],
    'height': [{ type: _angular_core.Input },],
    'data': [{ type: _angular_core.Input },],
    'minColor': [{ type: _angular_core.Input },],
    'midColor': [{ type: _angular_core.Input },],
    'maxColor': [{ type: _angular_core.Input },],
    'showScale': [{ type: _angular_core.Input },],
    'maxPostDepth': [{ type: _angular_core.Input },],
    'maptleComp': [{ type: _angular_core.ContentChildren, args: [MapTitleComponent,] },],
};

var AmexioMapsModule = (function () {
    function AmexioMapsModule() {
    }
    /**
     * @return {?}
     */
    AmexioMapsModule.forRoot = function () {
        return {
            ngModule: AmexioMapsModule,
            providers: [MapLoaderService]
        };
    };
    return AmexioMapsModule;
}());
AmexioMapsModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                imports: [
                    _angular_common.CommonModule
                ],
                declarations: [
                    MapProperties,
                    GeoChartComponent,
                    TreeMapComponent,
                    MapTitleComponent
                ],
                exports: [
                    MapProperties,
                    GeoChartComponent,
                    TreeMapComponent,
                    MapTitleComponent
                ],
                providers: [MapLoaderService]
            },] },
];
/**
 * @nocollapse
 */
AmexioMapsModule.ctorParameters = function () { return []; };

exports.AmexioMapsModule = AmexioMapsModule;
exports.MapProperties = MapProperties;
exports.GeoChartComponent = GeoChartComponent;
exports.TreeMapComponent = TreeMapComponent;
exports.MapTitleComponent = MapTitleComponent;
exports.MapLoaderService = MapLoaderService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
