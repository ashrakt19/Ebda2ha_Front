import { Component, ContentChildren, EventEmitter, Injectable, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpModule } from '@angular/http';
import { FormsModule } from '@angular/forms';
import { Observable } from 'rxjs/Observable';

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ChartLegendComponent = (function () {
    function ChartLegendComponent() {
        this.isLegendBold = false;
    }
    /**
     * @return {?}
     */
    ChartLegendComponent.prototype.ngOnInit = function () {
    };
    return ChartLegendComponent;
}());
ChartLegendComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-legend',
                template: " "
            },] },
];
/**
 * @nocollapse
 */
ChartLegendComponent.ctorParameters = function () { return []; };
ChartLegendComponent.propDecorators = {
    'legendPosition': [{ type: Input },],
    'legendAlignment': [{ type: Input },],
    'legendColor': [{ type: Input },],
    'legendFontName': [{ type: Input },],
    'legendFontSize': [{ type: Input },],
    'isLegendBold': [{ type: Input },],
    'maxLinesOfLegend': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ChartTitleComponent = (function () {
    function ChartTitleComponent() {
    }
    /**
     * @return {?}
     */
    ChartTitleComponent.prototype.ngOnInit = function () {
    };
    return ChartTitleComponent;
}());
ChartTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-title',
                template: " "
            },] },
];
/**
 * @nocollapse
 */
ChartTitleComponent.ctorParameters = function () { return []; };
ChartTitleComponent.propDecorators = {
    'title': [{ type: Input },],
    'titlePosition': [{ type: Input },],
    'titleColor': [{ type: Input },],
    'titleFontName': [{ type: Input },],
    'titleFontSize': [{ type: Input },],
    'isTitleBold': [{ type: Input },],
    'isTitleItalic': [{ type: Input },],
};

/**
 * Created by pratik on 17/8/17.
 */
var ChartLoaderService = (function () {
    function ChartLoaderService() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap'
        };
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    ChartLoaderService.prototype.loadCharts = function (chartName) {
        var _this = this;
        return new Observable(function (observer) {
            _this.loadScript().subscribe(function (val) { return console.log(); }, function (error) { return console.error(error); }, function () {
                _this.loadRequiredChart(observer, chartName);
            });
        });
    };
    /**
     * @return {?}
     */
    ChartLoaderService.prototype.loadScript = function () {
        var _this = this;
        return new Observable(function (observer) {
            if (!_this.isScriptLoading) {
                //check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    //check if chart package has been loaded using chartPackagename ?
                    _this.loadBaseChart(observer);
                }
                else {
                    _this.isScriptLoading = true;
                    var /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = function () {
                        _this.isScriptLoading = false;
                        _this.googleScriptLoadingNotifier.emit(true);
                        _this.loadBaseChart(observer);
                    };
                    script.onerror = function () {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                    if (loaded) {
                        _this.loadBaseChart(observer);
                    }
                });
            }
        });
    };
    /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    ChartLoaderService.prototype.loadBaseChart = function (observer) {
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(function () {
            observer.complete();
        });
    };
    /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    ChartLoaderService.prototype.loadRequiredChart = function (observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { 'packages': [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(function () {
                observer.complete();
            });
        }
    };
    return ChartLoaderService;
}());
ChartLoaderService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ChartLoaderService.ctorParameters = function () { return []; };

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ChartAreaComponent = (function () {
    function ChartAreaComponent() {
    }
    /**
     * @return {?}
     */
    ChartAreaComponent.prototype.ngOnInit = function () {
    };
    return ChartAreaComponent;
}());
ChartAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-area-properties',
                template: ""
            },] },
];
/**
 * @nocollapse
 */
ChartAreaComponent.ctorParameters = function () { return []; };
ChartAreaComponent.propDecorators = {
    'chartBackgroundColor': [{ type: Input },],
    'leftPosition': [{ type: Input },],
    'topPosition': [{ type: Input },],
    'chartWidthInPer': [{ type: Input },],
    'chartHeightInper': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var PieChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function PieChartComponent(loader) {
        this.loader = loader;
        this.is3D = false;
        this.id = 'amexio-chart-pie' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    PieChartComponent.prototype.drawChart = function () {
        this.pieData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            is3D: this.is3D,
            pieHole: this.pieHole,
            pieStartAngle: this.pieStartAngle,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
        };
        this.chart = new google.visualization.PieChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.pieData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.onClick);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PieChartComponent.prototype.onClick = function (e) {
    };
    /**
     * @return {?}
     */
    PieChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    PieChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('PieChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PieChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return PieChartComponent;
}());
PieChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-pie', template: "\n    \n        <div [attr.id]=\"id\"\n             [style.width]=\"width\"\n             [style.height]=\"height\"\n             (window:resize)=\"onResize($event)\">\n          <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n          </div>\n        </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
PieChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
PieChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'is3D': [{ type: Input },],
    'pieHole': [{ type: Input },],
    'data': [{ type: Input },],
    'pieStartAngle': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var AreaChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function AreaChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-area' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.drawChart = function () {
        this.areaData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
        };
        this.chart = new google.visualization.AreaChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.areaData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    AreaChartComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    AreaChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('AreaChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AreaChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return AreaChartComponent;
}());
AreaChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-area',
                template: "\n    <div [attr.id]=\"id\"\n         [style.width]=\"width\"\n         [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n    <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n    </div>\n    </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
AreaChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
AreaChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ColumnChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function ColumnChartComponent(loader) {
        this.loader = loader;
        //showing stack chart
        this.isStacked = false;
        this.id = 'amexio-chart-column' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.drawChart = function () {
        this.columnData = this.createTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            isStacked: this.isStacked,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
        };
        this.chart = new google.visualization.ColumnChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.columnData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.onClick);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ColumnChartComponent.prototype.onClick = function (e) {
    };
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * This method create data table structure of array and return in required chart data
     *
     *
     * @param {?} array
     * @return {?}
     */
    ColumnChartComponent.prototype.createTable = function (array) {
        //create Duplicate Array for data arrangement
        var /** @type {?} */ dupArray = array.slice();
        var /** @type {?} */ data = new google.visualization.DataTable();
        var /** @type {?} */ labelObject = dupArray[0];
        //remove first object of array
        dupArray.shift();
        labelObject.forEach(function (dataTypeObject) {
            data.addColumn(dataTypeObject.dataType, dataTypeObject.label);
        });
        var /** @type {?} */ finalArray = [];
        dupArray.forEach(function (rowObject) {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    };
    /**
     * @return {?}
     */
    ColumnChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('ColumnChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColumnChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return ColumnChartComponent;
}());
ColumnChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-column',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\"\n           (window:resize)=\"onResize($event)\">\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
ColumnChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
ColumnChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'isStacked': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var DonutChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function DonutChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-donut' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.drawChart = function () {
        this.donutData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            pieHole: 0.4,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
        };
        this.chart = new google.visualization.PieChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.donutData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.onClick);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DonutChartComponent.prototype.onClick = function (e) {
    };
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    DonutChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('PieChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DonutChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return DonutChartComponent;
}());
DonutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-donut', template: "\n        <div [attr.id]=\"id\"\n             [style.width]=\"width\"\n             [style.height]=\"height\"\n             (window:resize)=\"onResize($event)\" >\n          <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n          </div>\n        </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
DonutChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
DonutChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var HistogramChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function HistogramChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-line' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.drawChart = function () {
        this.histogramData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
        };
        this.chart = new google.visualization.Histogram(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.histogramData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.onClick);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    HistogramChartComponent.prototype.onClick = function (e) {
    };
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    HistogramChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('Histogram').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    return HistogramChartComponent;
}());
HistogramChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-histogram',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\"\n      >\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
HistogramChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
HistogramChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var LineChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function LineChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-line' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    LineChartComponent.prototype.drawChart = function () {
        this.lineData = this.createTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
        };
        this.chart = new google.visualization.LineChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.lineData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.onClick);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    LineChartComponent.prototype.onClick = function (e) {
    };
    /**
     * @return {?}
     */
    LineChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * This method create data table structure of array and return in required chart data
     *
     *
     * @param {?} array
     * @return {?}
     */
    LineChartComponent.prototype.createTable = function (array) {
        //create Duplicate Array for data arrangement
        var /** @type {?} */ dupArray = array.slice();
        var /** @type {?} */ data = new google.visualization.DataTable();
        var /** @type {?} */ labelObject = dupArray[0];
        //remove first object of array
        dupArray.shift();
        labelObject.forEach(function (dataTypeObject) {
            data.addColumn(dataTypeObject.dataType, dataTypeObject.label);
        });
        var /** @type {?} */ finalArray = [];
        dupArray.forEach(function (rowObject) {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    };
    /**
     * @return {?}
     */
    LineChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('LineChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    LineChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return LineChartComponent;
}());
LineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-line', template: "\n        <div [attr.id]=\"id\"\n             [style.width]=\"width\"\n             [style.height]=\"height\"\n             (window:resize)=\"onResize($event)\" >\n          <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n          </div>\n        </div>\n\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
LineChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
LineChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var BarChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function BarChartComponent(loader) {
        this.loader = loader;
        //showing stack chart
        this.isStacked = false;
        this.id = 'amexio-chart-bar' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    BarChartComponent.prototype.drawChart = function () {
        //bind the data
        this.barData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            isStacked: this.isStacked,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
            hAxis: {
                title: this.xAxisTitle, minValue: 0
            },
            vAxis: {
                title: this.yAxisTitle
            }
        };
        this.chart = new google.visualization.BarChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.barData, this.options);
    };
    /**
     * @return {?}
     */
    BarChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * @return {?}
     */
    BarChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('BarChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BarChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return BarChartComponent;
}());
BarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-bar',
                template: "\n        <div [attr.id]=\"id\"\n             [style.width]=\"width\"\n             [style.height]=\"height\"  (window:resize)=\"onResize($event)\">\n          <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n          </div>\n        </div>\n    ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
BarChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
BarChartComponent.propDecorators = {
    'data': [{ type: Input },],
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'isStacked': [{ type: Input },],
    'xAxisTitle': [{ type: Input },],
    'yAxisTitle': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var TimeLineChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function TimeLineChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-timeline' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    TimeLineChartComponent.prototype.drawChart = function () {
        this.chart = new google.visualization.Timeline(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.createTable(this.data));
        google.visualization.events.addListener(this.chart, 'click', this.onClick);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TimeLineChartComponent.prototype.onClick = function (e) {
    };
    /**
     * @return {?}
     */
    TimeLineChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    };
    /**
     * This method create data table structure of array and return in required chart data
     *
     *
     * @param {?} array
     * @return {?}
     */
    TimeLineChartComponent.prototype.createTable = function (array) {
        //create Duplicate Array for data arrangement
        var /** @type {?} */ dupArray = array.slice();
        var /** @type {?} */ data = new google.visualization.DataTable();
        var /** @type {?} */ labelObject = dupArray[0];
        //remove first object of array
        dupArray.shift();
        labelObject.forEach(function (dataTypeObject) {
            data.addColumn(dataTypeObject.dataType, dataTypeObject.label);
        });
        var /** @type {?} */ finalArray = [];
        dupArray.forEach(function (rowObject) {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    };
    /**
     * @return {?}
     */
    TimeLineChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('Timeline').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    return TimeLineChartComponent;
}());
TimeLineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-timeline',
                template: "\n    <div [attr.id]=\"id\"\n         [style.width]=\"width\"\n    >\n      <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n      </div>\n    </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
TimeLineChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
TimeLineChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'data': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var HorizontalAxisComponent = (function () {
    function HorizontalAxisComponent() {
    }
    /**
     * @return {?}
     */
    HorizontalAxisComponent.prototype.ngOnInit = function () {
    };
    return HorizontalAxisComponent;
}());
HorizontalAxisComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-horizontal-axis',
                template: " "
            },] },
];
/**
 * @nocollapse
 */
HorizontalAxisComponent.ctorParameters = function () { return []; };
HorizontalAxisComponent.propDecorators = {
    'title': [{ type: Input },],
    'titleTextColor': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var VerticalAxisComponent = (function () {
    function VerticalAxisComponent() {
    }
    /**
     * @return {?}
     */
    VerticalAxisComponent.prototype.ngOnInit = function () {
    };
    return VerticalAxisComponent;
}());
VerticalAxisComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-vertical-axis',
                template: " "
            },] },
];
/**
 * @nocollapse
 */
VerticalAxisComponent.ctorParameters = function () { return []; };
VerticalAxisComponent.propDecorators = {
    'title': [{ type: Input },],
    'titleTextColor': [{ type: Input },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ComboChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function ComboChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-combo' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.drawChart = function () {
        this.comboData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
            vAxis: this.verticalComponent ? { title: this.verticalComponent.title ? this.verticalComponent.title : null, titleTextStyle: { color: this.verticalComponent.titleTextColor ? this.verticalComponent.titleTextColor : null } } : null,
            hAxis: this.horizontalComponent ? { title: this.horizontalComponent.title ? this.horizontalComponent.title : null, titleTextStyle: { color: this.horizontalComponent.titleTextColor ? this.horizontalComponent.titleTextColor : null } } : null,
            seriesType: 'bars',
            series: { 4: { type: 'line' } }
        };
        this.chart = new google.visualization.ComboChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.comboData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ComboChartComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length == 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length == 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    ComboChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('ComboChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComboChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return ComboChartComponent;
}());
ComboChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-combo',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
ComboChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
ComboChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
    'horizontalComp': [{ type: ContentChildren, args: [HorizontalAxisComponent,] },],
    'verticalComp': [{ type: ContentChildren, args: [VerticalAxisComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var BubbleChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function BubbleChartComponent(loader) {
        this.loader = loader;
        this.colorAxis = [];
        this.id = 'amexio-chart-bubble' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.drawChart = function () {
        this.bubbleData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
            vAxis: this.verticalComponent ? { title: this.verticalComponent.title ? this.verticalComponent.title : null, titleTextStyle: { color: this.verticalComponent.titleTextColor ? this.verticalComponent.titleTextColor : null } } : null,
            hAxis: this.horizontalComponent ? { title: this.horizontalComponent.title ? this.horizontalComponent.title : null, titleTextStyle: { color: this.horizontalComponent.titleTextColor ? this.horizontalComponent.titleTextColor : null } } : null,
            bubble: { textStyle: { fontSize: 11 } },
            colorAxis: { colors: this.colorAxis }
        };
        this.chart = new google.visualization.BubbleChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.bubbleData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    BubbleChartComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length == 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length == 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    BubbleChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('BubbleChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BubbleChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return BubbleChartComponent;
}());
BubbleChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-bubble',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
BubbleChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
BubbleChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'colorAxis': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
    'horizontalComp': [{ type: ContentChildren, args: [HorizontalAxisComponent,] },],
    'verticalComp': [{ type: ContentChildren, args: [VerticalAxisComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var ScatterChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function ScatterChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-scatter' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.drawChart = function () {
        this.scatterData = google.visualization.arrayToDataTable(this.data);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: this.chartLengendComponent ? {
                position: this.chartLengendComponent.legendPosition ? this.chartLengendComponent.legendPosition : null,
                maxLines: this.chartLengendComponent.maxLinesOfLegend ? this.chartLengendComponent.maxLinesOfLegend : null,
                textStyle: {
                    color: this.chartLengendComponent.legendColor ? this.chartLengendComponent.legendColor : null,
                    fontSize: this.chartLengendComponent.legendFontSize ? this.chartLengendComponent.legendFontSize : null,
                    fontName: this.chartLengendComponent.legendFontName ? this.chartLengendComponent.legendFontName : null,
                    bold: this.chartLengendComponent.isLegendBold ? this.chartLengendComponent.isLegendBold : null,
                    alignment: this.chartLengendComponent.legendAlignment ? this.chartLengendComponent.legendAlignment : null
                }
            } : 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
            vAxis: this.verticalComponent ? { title: this.verticalComponent.title ? this.verticalComponent.title : null, titleTextStyle: { color: this.verticalComponent.titleTextColor ? this.verticalComponent.titleTextColor : null } } : null,
            hAxis: this.horizontalComponent ? { title: this.horizontalComponent.title ? this.horizontalComponent.title : null, titleTextStyle: { color: this.horizontalComponent.titleTextColor ? this.horizontalComponent.titleTextColor : null } } : null
        };
        this.chart = new google.visualization.ScatterChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.scatterData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ScatterChartComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.ngAfterContentInit = function () {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        //take first component
        if (this.chartLegendArray.length == 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length == 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length == 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    ScatterChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('ScatterChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ScatterChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return ScatterChartComponent;
}());
ScatterChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-scatter',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
ScatterChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
ScatterChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartLegendComp': [{ type: ContentChildren, args: [ChartLegendComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
    'horizontalComp': [{ type: ContentChildren, args: [HorizontalAxisComponent,] },],
    'verticalComp': [{ type: ContentChildren, args: [VerticalAxisComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var CandlestickChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function CandlestickChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-candlestick' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.drawChart = function () {
        this.candlestickData = google.visualization.arrayToDataTable(this.data, true);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
            vAxis: this.verticalComponent ? { title: this.verticalComponent.title ? this.verticalComponent.title : null, titleTextStyle: { color: this.verticalComponent.titleTextColor ? this.verticalComponent.titleTextColor : null } } : null,
            hAxis: this.horizontalComponent ? { title: this.horizontalComponent.title ? this.horizontalComponent.title : null, titleTextStyle: { color: this.horizontalComponent.titleTextColor ? this.horizontalComponent.titleTextColor : null } } : null
        };
        this.chart = new google.visualization.CandlestickChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.candlestickData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    CandlestickChartComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.ngAfterContentInit = function () {
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        //take first component
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length == 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length == 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    CandlestickChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('CandlestickChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CandlestickChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return CandlestickChartComponent;
}());
CandlestickChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-candlestick',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
CandlestickChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
CandlestickChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'horizontalComp': [{ type: ContentChildren, args: [HorizontalAxisComponent,] },],
    'verticalComp': [{ type: ContentChildren, args: [VerticalAxisComponent,] },],
};

/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
var CandlestickWaterfallChartComponent = (function () {
    /**
     * @param {?} loader
     */
    function CandlestickWaterfallChartComponent(loader) {
        this.loader = loader;
        this.id = 'amexio-chart-candlestick-water' + Math.floor(Math.random() * 90000) + 10000;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.drawChart = function () {
        this.candlestickData = google.visualization.arrayToDataTable(this.data, true);
        this.options = {
            title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
            titleTextStyle: this.chartTitleComponent ? {
                color: this.chartTitleComponent.titleColor ? this.chartTitleComponent.titleColor : null,
                fontName: this.chartTitleComponent.titleFontName ? this.chartTitleComponent.titleFontName : null,
                fontSize: this.chartTitleComponent.titleFontSize ? this.chartTitleComponent.titleFontSize : null,
                bold: this.chartTitleComponent.isTitleBold ? this.chartTitleComponent.isTitleBold : null,
                italic: this.chartTitleComponent.isTitleItalic ? this.chartTitleComponent.isTitleItalic : null
            } : null,
            backgroundColor: this.backgroundColor,
            legend: 'none',
            chartArea: this.chartAreaComponent ? {
                backgroundColor: this.chartAreaComponent.chartBackgroundColor ? this.chartAreaComponent.chartBackgroundColor : null,
                left: this.chartAreaComponent.leftPosition ? this.chartAreaComponent.leftPosition : null,
                top: this.chartAreaComponent.topPosition ? this.chartAreaComponent.topPosition : null,
                height: this.chartAreaComponent.chartHeightInper ? this.chartAreaComponent.chartHeightInper : null,
                width: this.chartAreaComponent.chartWidthInPer ? this.chartAreaComponent.chartWidthInPer : null
            } : null,
            vAxis: this.verticalComponent ? { title: this.verticalComponent.title ? this.verticalComponent.title : null, titleTextStyle: { color: this.verticalComponent.titleTextColor ? this.verticalComponent.titleTextColor : null } } : null,
            hAxis: this.horizontalComponent ? { title: this.horizontalComponent.title ? this.horizontalComponent.title : null, titleTextStyle: { color: this.horizontalComponent.titleTextColor ? this.horizontalComponent.titleTextColor : null } } : null,
            bar: { groupWidth: this.barWidthGroup ? this.barWidthGroup : null },
            candlestick: {
                fallingColor: this.fallingColorOfBar ? { strokeWidth: 0, fill: this.fallingColorOfBar ? this.fallingColorOfBar : null } : null,
                risingColor: this.risingColorOfBar ? { strokeWidth: 0, fill: this.risingColorOfBar ? this.risingColorOfBar : null } : null // green
            }
        };
        this.chart = new google.visualization.CandlestickChart(document.getElementById(this.id));
        this.hasLoaded = true;
        this.chart.draw(this.candlestickData, this.options);
        google.visualization.events.addListener(this.chart, 'click', this.click);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.click = function (e) {
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.ngAfterContentInit = function () {
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        //take first component
        if (this.chartTitleArray.length == 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length == 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length == 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length == 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    };
    /**
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.hasLoaded = false;
        this.loader.loadCharts('CandlestickChart').subscribe(function (value) { return console.log(); }, function (errror) { return console.error(errror); }, function () {
            _this.drawChart();
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CandlestickWaterfallChartComponent.prototype.onResize = function (event) {
        this.drawChart();
    };
    return CandlestickWaterfallChartComponent;
}());
CandlestickWaterfallChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-candlestick-waterfall',
                template: "\n      <div [attr.id]=\"id\"\n           [style.width]=\"width\"\n           [style.height]=\"height\" (window:resize)=\"onResize($event)\">\n        <div *ngIf=\"!hasLoaded\" class=\"lmask\">\n        </div>\n      </div>\n  ",
                styles: [".lmask {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    background-color: #000;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 9999;\n    opacity: 0.4;\n  }\n  .lmask.fixed {\n    position: fixed;\n  }\n  .lmask:before {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-right: 5px solid transparent;\n    border-left: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 35px #2187e7;\n    width: 50px;\n    height: 50px;\n    -moz-animation: spinPulse 1s infinite ease-in-out;\n    -webkit-animation: spinPulse 1s infinite linear;\n    margin: -25px 0 0 -25px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n  .lmask:after {\n    content: '';\n    background-color: transparent;\n    border: 5px solid rgba(0, 183, 229, 0.9);\n    opacity: .9;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-radius: 50px;\n    box-shadow: 0 0 15px #2187e7;\n    width: 30px;\n    height: 30px;\n    -moz-animation: spinoffPulse 1s infinite linear;\n    -webkit-animation: spinoffPulse 1s infinite linear;\n    margin: -15px 0 0 -15px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n\n  @-moz-keyframes spinPulse {\n    0% {\n      -moz-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -moz-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -moz-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-moz-keyframes spinoffPulse {\n    0% {\n      -moz-transform: rotate(0deg);\n    }\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spinPulse {\n    0% {\n      -webkit-transform: rotate(160deg);\n      opacity: 0;\n      box-shadow: 0 0 1px #2187e7;\n    }\n    50% {\n      -webkit-transform: rotate(145deg);\n      opacity: 1;\n    }\n    100% {\n      -webkit-transform: rotate(-320deg);\n      opacity: 0;\n    }\n  }\n  @-webkit-keyframes spinoffPulse {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  "]
            },] },
];
/**
 * @nocollapse
 */
CandlestickWaterfallChartComponent.ctorParameters = function () { return [
    { type: ChartLoaderService, },
]; };
CandlestickWaterfallChartComponent.propDecorators = {
    'width': [{ type: Input },],
    'height': [{ type: Input },],
    'data': [{ type: Input },],
    'backgroundColor': [{ type: Input },],
    'barWidthGroup': [{ type: Input },],
    'fallingColorOfBar': [{ type: Input },],
    'risingColorOfBar': [{ type: Input },],
    'chartAreaComp': [{ type: ContentChildren, args: [ChartAreaComponent,] },],
    'chartTitleComp': [{ type: ContentChildren, args: [ChartTitleComponent,] },],
    'horizontalComp': [{ type: ContentChildren, args: [HorizontalAxisComponent,] },],
    'verticalComp': [{ type: ContentChildren, args: [VerticalAxisComponent,] },],
};

var AmexioChartModule = (function () {
    function AmexioChartModule() {
    }
    /**
     * @return {?}
     */
    AmexioChartModule.forRoot = function () {
        return {
            ngModule: AmexioChartModule,
            providers: [ChartLoaderService]
        };
    };
    return AmexioChartModule;
}());
AmexioChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpModule,
                    FormsModule
                ],
                declarations: [
                    AreaChartComponent, BarChartComponent, ChartAreaComponent,
                    ChartLegendComponent, ChartTitleComponent, ColumnChartComponent,
                    DonutChartComponent, HistogramChartComponent, LineChartComponent,
                    PieChartComponent, TimeLineChartComponent, ComboChartComponent,
                    VerticalAxisComponent,
                    HorizontalAxisComponent,
                    BubbleChartComponent,
                    ScatterChartComponent, CandlestickChartComponent, CandlestickWaterfallChartComponent
                ],
                exports: [
                    AreaChartComponent, BarChartComponent, ChartAreaComponent,
                    ChartLegendComponent, ChartTitleComponent, ColumnChartComponent,
                    DonutChartComponent, HistogramChartComponent, LineChartComponent, PieChartComponent,
                    TimeLineChartComponent, ComboChartComponent, VerticalAxisComponent,
                    HorizontalAxisComponent,
                    BubbleChartComponent,
                    ScatterChartComponent, CandlestickChartComponent, CandlestickWaterfallChartComponent
                ],
                providers: [ChartLoaderService]
            },] },
];
/**
 * @nocollapse
 */
AmexioChartModule.ctorParameters = function () { return []; };

export { AmexioChartModule, ChartLegendComponent, ChartTitleComponent, PieChartComponent, AreaChartComponent, ChartAreaComponent, ColumnChartComponent, DonutChartComponent, HistogramChartComponent, LineChartComponent, BarChartComponent, TimeLineChartComponent, ComboChartComponent, VerticalAxisComponent, HorizontalAxisComponent, BubbleChartComponent, ScatterChartComponent, CandlestickChartComponent, CandlestickWaterfallChartComponent, ChartLoaderService };
