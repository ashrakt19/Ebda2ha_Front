import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, HostListener, EventEmitter, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var CountUpDirective = /** @class */ (function () {
    function CountUpDirective(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    CountUpDirective.prototype.onClick = function () {
        if (this.reanimateOnClick) {
            this.animate();
        }
    };
    CountUpDirective.prototype.ngOnChanges = function (changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (changes.endVal && changes.endVal.currentValue !== undefined) {
            if (this.previousEndVal !== undefined) {
                this.options = tslib_1.__assign({}, this.options, { startVal: this.previousEndVal });
            }
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            this.animate();
            this.previousEndVal = this.endVal;
        }
    };
    CountUpDirective.prototype.animate = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.countUp.reset();
            _this.countUp.start(function () {
                _this.zone.run(function () {
                    _this.complete.emit();
                });
            });
        });
    };
    tslib_1.__decorate([
        Input('countUp'),
        tslib_1.__metadata("design:type", Number)
    ], CountUpDirective.prototype, "endVal", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CountUpDirective.prototype, "options", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CountUpDirective.prototype, "reanimateOnClick", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], CountUpDirective.prototype, "complete", void 0);
    tslib_1.__decorate([
        HostListener('click'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], CountUpDirective.prototype, "onClick", null);
    CountUpDirective = tslib_1.__decorate([ tslib_1.__param(2, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            NgZone,
            Object])
    ], CountUpDirective);
CountUpDirective.ɵfac = function CountUpDirective_Factory(t) { return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
CountUpDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CountUpDirective, selectors: [["", "countUp", ""]], hostBindings: function CountUpDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CountUpDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { options: "options", reanimateOnClick: "reanimateOnClick", endVal: ["countUp", "endVal"] }, outputs: { complete: "complete" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{
        type: Directive,
        args: [{
                selector: '[countUp]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { options: [{
            type: Input
        }], reanimateOnClick: [{
            type: Input
        }], complete: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], endVal: [{
            type: Input,
            args: ['countUp']
        }] }); })();
    return CountUpDirective;
}());
export { CountUpDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtdXAuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJjb3VudHVwLmpzLWFuZ3VsYXIyL2xpYi9jb3VudC11cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFlBQVksRUFHWixNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFDNUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBa0IsTUFBTSxZQUFZLENBQUM7QUFDckQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBS2xEO0FBQW9ELElBcUJsRCwwQkFDVSxFQUFjLEVBQ2QsSUFBWSxFQUNTLFVBQWtCO0FBQ2pELFFBSFUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQ2YsU0FBSSxHQUFKLElBQUksQ0FBUTtBQUFDLFFBQ1EsZUFBVSxHQUFWLFVBQVUsQ0FBUTtBQUFDLFFBZnpDLFlBQU8sR0FBbUIsRUFBRSxDQUFDO0FBQ3hDLFFBQVcscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0FBQ25DLFFBQVksYUFBUSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7QUFDaEQsSUFhSyxDQUFDO0FBQ04sSUFiRSxtQ0FBbUM7QUFDckMsSUFDRSxrQ0FBTyxHQUFQO0FBQ0EsUUFBRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUMvQixZQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFNRSxzQ0FBVyxHQUFYLFVBQVksT0FBc0I7QUFDcEMsUUFBSSx3Q0FBd0M7QUFDNUMsUUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQzdDLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUFJLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7QUFDckUsWUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFFO0FBQzdDLGdCQUFRLElBQUksQ0FBQyxPQUFPLHdCQUNQLElBQUksQ0FBQyxPQUFPLElBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxjQUFjLEdBQzlCLENBQUM7QUFDVixhQUFPO0FBQ1AsWUFBTSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25GLFlBQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3JCLFlBQU0sSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3hDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUFVLGtDQUFPLEdBQWY7QUFBYyxRQUFkLGlCQVNDO0FBQ0gsUUFUSSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0FBQzFCLFlBQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMzQixZQUFNLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ25CLGdCQUFFLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ2hCLG9CQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDL0IsZ0JBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNGLElBbkRtQjtBQUNmLFFBREYsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUFFO0FBQ2Msb0RBREE7QUFDbEMsSUFJVTtBQUFxQixRQUE3QixLQUFLLEVBQUU7QUFBRTtBQUNTLHFEQURtQjtBQUN2QyxJQUFVO0FBQXFCLFFBQTdCLEtBQUssRUFBRTtBQUFFO0FBQ2MsOERBRFM7QUFDbEMsSUFBVztBQUFxQixRQUE5QixNQUFNLEVBQUU7QUFBRTtBQUVBLHNEQUZtQztBQUVoRCxJQUVFO0FBQ08sUUFGTixZQUFZLENBQUMsT0FBTyxDQUFDO0FBQ3ZCO0FBRU07QUFLSztBQUVFLG1EQUxYO0FBRUgsSUFyQmEsZ0JBQWdCLGdDQUg1QixTQUFTLENBQUMsY0FDVCxRQUFRLHpDQUVGLENBd0JILG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtDQTFCWixXQUFXLFVBQ3RCLENBQUMsdkJBeUJ3QixpREFGVixVQUFVO0FBQzFCLFlBQWtCLE1BQU07QUFDeEIsWUFBNkMsTUFBTTtBQUNsRCxPQXpCWSxnQkFBZ0IsQ0F1RDVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsSUFERCx1QkFBQztBQUNBLENBREEsQUF2REQsSUF1REM7QUFDRCxTQXhEYSxnQkFBZ0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgSG9zdExpc3RlbmVyLFxuICBFdmVudEVtaXR0ZXIsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgTmdab25lLCBJbmplY3QsIFBMQVRGT1JNX0lEXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ291bnRVcCwgQ291bnRVcE9wdGlvbnMgfSBmcm9tICdjb3VudHVwLmpzJztcbmltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjb3VudFVwXSdcbn0pXG5leHBvcnQgY2xhc3MgQ291bnRVcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgY291bnRVcDogQ291bnRVcDtcbiAgLy8gdGhlIHZhbHVlIHlvdSB3YW50IHRvIGNvdW50IHRvXG4gIEBJbnB1dCgnY291bnRVcCcpIGVuZFZhbDogbnVtYmVyO1xuICAvLyBwcmV2aW91cyBlbmQgdmFsIGVuYWJsZXMgdXMgdG8gY291bnQgZnJvbSBsYXN0IGVuZFZhbFxuICAvLyB3aGVuIGVuZFZhbCBpcyBjaGFuZ2VkXG4gIHByZXZpb3VzRW5kVmFsOiBudW1iZXI7XG5cbiAgQElucHV0KCkgb3B0aW9uczogQ291bnRVcE9wdGlvbnMgPSB7fTtcbiAgQElucHV0KCkgcmVhbmltYXRlT25DbGljayA9IHRydWU7XG4gIEBPdXRwdXQoKSBjb21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvLyBSZS1hbmltYXRlIGlmIHByZWZlcmVuY2UgaXMgc2V0LlxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMucmVhbmltYXRlT25DbGljaykge1xuICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAvLyBkb24ndCBhbmltYXRlIHNlcnZlci1zaWRlICh1bml2ZXJzYWwpXG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLmVuZFZhbCAmJiBjaGFuZ2VzLmVuZFZhbC5jdXJyZW50VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRoaXMucHJldmlvdXNFbmRWYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgIHN0YXJ0VmFsOiB0aGlzLnByZXZpb3VzRW5kVmFsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB0aGlzLmNvdW50VXAgPSBuZXcgQ291bnRVcCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuZW5kVmFsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgICB0aGlzLnByZXZpb3VzRW5kVmFsID0gdGhpcy5lbmRWYWw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhbmltYXRlKCkge1xuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLmNvdW50VXAucmVzZXQoKTtcbiAgICAgIHRoaXMuY291bnRVcC5zdGFydCgoKSA9PiB7XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUuZW1pdCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=