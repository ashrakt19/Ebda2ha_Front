{"ast":null,"code":"/**\r\n * @license Angular v10.2.3\r\n * (c) 2010-2020 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nvar __globalThis = typeof globalThis !== 'undefined' && globalThis;\n\nvar __window = typeof window !== 'undefined' && window;\n\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\n\nvar __global = typeof global !== 'undefined' && global; // Always use __globalThis if available; this is the spec-defined global variable across all\n// environments.\n// Then fallback to __global first; in Node tests both __global and __window may be defined.\n\n\nvar _global = __globalThis || __global || __window || __self;\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Tag a template literal string for localization.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `some string to localize`\r\n * ```\r\n *\r\n * **Providing meaning, description and id**\r\n *\r\n * You can optionally specify one or more of `meaning`, `description` and `id` for a localized\r\n * string by pre-pending it with a colon delimited block of the form:\r\n *\r\n * ```ts\r\n * $localize`:meaning|description@@id:source message text`;\r\n *\r\n * $localize`:meaning|:source message text`;\r\n * $localize`:description:source message text`;\r\n * $localize`:@@id:source message text`;\r\n * ```\r\n *\r\n * This format is the same as that used for `i18n` markers in Angular templates. See the\r\n * [Angular 18n guide](guide/i18n#template-translations).\r\n *\r\n * **Naming placeholders**\r\n *\r\n * If the template literal string contains expressions, then the expressions will be automatically\r\n * associated with placeholder names for you.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `Hi ${name}! There are ${items.length} items.`;\r\n * ```\r\n *\r\n * will generate a message-source of `Hi {$PH}! There are {$PH_1} items`.\r\n *\r\n * The recommended practice is to name the placeholder associated with each expression though.\r\n *\r\n * Do this by providing the placeholder name wrapped in `:` characters directly after the\r\n * expression. These placeholder names are stripped out of the rendered localized string.\r\n *\r\n * For example, to name the `items.length` expression placeholder `itemCount` you write:\r\n *\r\n * ```ts\r\n * $localize `There are ${items.length}:itemCount: items`;\r\n * ```\r\n *\r\n * **Escaping colon markers**\r\n *\r\n * If you need to use a `:` character directly at the start of a tagged string that has no\r\n * metadata block, or directly after a substitution expression that has no name you must escape\r\n * the `:` by preceding it with a backslash:\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * // message has a metadata block so no need to escape colon\r\n * $localize `:some description::this message starts with a colon (:)`;\r\n * // no metadata block so the colon must be escaped\r\n * $localize `\\:this message starts with a colon (:)`;\r\n * ```\r\n *\r\n * ```ts\r\n * // named substitution so no need to escape colon\r\n * $localize `${label}:label:: ${}`\r\n * // anonymous substitution so colon must be escaped\r\n * $localize `${label}\\: ${}`\r\n * ```\r\n *\r\n * **Processing localized strings:**\r\n *\r\n * There are three scenarios:\r\n *\r\n * * **compile-time inlining**: the `$localize` tag is transformed at compile time by a\r\n * transpiler, removing the tag and replacing the template literal string with a translated\r\n * literal string from a collection of translations provided to the transpilation tool.\r\n *\r\n * * **run-time evaluation**: the `$localize` tag is a run-time function that replaces and\r\n * reorders the parts (static strings and expressions) of the template literal string with strings\r\n * from a collection of translations loaded at run-time.\r\n *\r\n * * **pass-through evaluation**: the `$localize` tag is a run-time function that simply evaluates\r\n * the original template literal string without applying any translations to the parts. This\r\n * version is used during development or where there is no need to translate the localized\r\n * template literals.\r\n * @param messageParts a collection of the static parts of the template string.\r\n * @param expressions a collection of the values of each placeholder in the template string.\r\n * @returns the translated string, with the `messageParts` and `expressions` interleaved together.\r\n */\n\n\nvar $localize = function $localize(messageParts) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n\n  if ($localize.translate) {\n    // Don't use array expansion here to avoid the compiler adding `__read()` helper unnecessarily.\n    var translation = $localize.translate(messageParts, expressions);\n    messageParts = translation[0];\n    expressions = translation[1];\n  }\n\n  var message = stripBlock(messageParts[0], messageParts.raw[0]);\n\n  for (var i = 1; i < messageParts.length; i++) {\n    message += expressions[i - 1] + stripBlock(messageParts[i], messageParts.raw[i]);\n  }\n\n  return message;\n};\n\nvar BLOCK_MARKER = ':';\n/**\r\n * Strip a delimited \"block\" from the start of the `messagePart`, if it is found.\r\n *\r\n * If a marker character (:) actually appears in the content at the start of a tagged string or\r\n * after a substitution expression, where a block has not been provided the character must be\r\n * escaped with a backslash, `\\:`. This function checks for this by looking at the `raw`\r\n * messagePart, which should still contain the backslash.\r\n *\r\n * @param messagePart The cooked message part to process.\r\n * @param rawMessagePart The raw message part to check.\r\n * @returns the message part with the placeholder name stripped, if found.\r\n * @throws an error if the block is unterminated\r\n */\n\nfunction stripBlock(messagePart, rawMessagePart) {\n  return rawMessagePart.charAt(0) === BLOCK_MARKER ? messagePart.substring(findEndOfBlock(messagePart, rawMessagePart) + 1) : messagePart;\n}\n/**\r\n * Find the end of a \"marked block\" indicated by the first non-escaped colon.\r\n *\r\n * @param cooked The cooked string (where escaped chars have been processed)\r\n * @param raw The raw string (where escape sequences are still in place)\r\n *\r\n * @returns the index of the end of block marker\r\n * @throws an error if the block is unterminated\r\n */\n\n\nfunction findEndOfBlock(cooked, raw) {\n  /***********************************************************************************************\r\n   * This function is repeated in `src/utils/messages.ts` and the two should be kept in sync.\r\n   * The reason is that this file is marked as having side-effects, and if we import `messages.ts`\r\n   * into it, the whole of `src/utils` will be included in this bundle and none of the functions\r\n   * will be tree shaken.\r\n   ***********************************************************************************************/\n  for (var cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {\n    if (raw[rawIndex] === '\\\\') {\n      rawIndex++;\n    } else if (cooked[cookedIndex] === BLOCK_MARKER) {\n      return cookedIndex;\n    }\n  }\n\n  throw new Error(\"Unterminated $localize metadata block in \\\"\".concat(raw, \"\\\".\"));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Attach $localize to the global context, as a side-effect of this module.\n\n\n_global.$localize = $localize; //# sourceMappingURL=init.js.map","map":{"version":3,"sources":["F:/front/Ebda2ha_Front/node_modules/@angular/localize/fesm2015/init.js"],"names":["__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","__global","global","_global","$localize","messageParts","expressions","translate","translation","message","stripBlock","raw","i","length","BLOCK_MARKER","messagePart","rawMessagePart","charAt","substring","findEndOfBlock","cooked","cookedIndex","rawIndex","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,YAAY,GAAG,OAAOC,UAAP,KAAsB,WAAtB,IAAqCA,UAA1D;;AACA,IAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAlD;;AACA,IAAMC,MAAM,GAAG,OAAOC,IAAP,KAAgB,WAAhB,IAA+B,OAAOC,iBAAP,KAA6B,WAA5D,IACXD,IAAI,YAAYC,iBADL,IAC0BD,IADzC;;AAEA,IAAME,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAlD,C,CACA;AACA;AACA;;;AACA,IAAMC,OAAO,GAAGT,YAAY,IAAIO,QAAhB,IAA4BL,QAA5B,IAAwCE,MAAxwC;AAAA,oCAAbC,WAAa;AAAbA,IAAAA,WAAa;AAAA;;AACtD,MAAIF,SAAS,CAACG,SAAd,EAAyB;AACrB;AACA,QAAMC,WAAW,GAAGJ,SAAS,CAACG,SAAV,CAAoBF,YAApB,EAAkCC,WAAlC,CAApB;AACAD,IAAAA,YAAY,GAAGG,WAAW,CAAC,CAAD,CAA1B;AACAF,IAAAA,WAAW,GAAGE,WAAW,CAAC,CAAD,CAAzB;AACH;;AACD,MAAIC,OAAO,GAAGC,UAAU,CAACL,YAAY,CAAC,CAAD,CAAb,EAAkBA,YAAY,CAACM,GAAb,CAAiB,CAAjB,CAAlB,CAAxB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,YAAY,CAACQ,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CH,IAAAA,OAAO,IAAIH,WAAW,CAACM,CAAC,GAAG,CAAL,CAAX,GAAqBF,UAAU,CAACL,YAAY,CAACO,CAAD,CAAb,EAAkBP,YAAY,CAACM,GAAb,CAAiBC,CAAjB,CAAlB,CAA1C;AACH;;AACD,SAAOH,OAAP;AACH,CAZD;;AAaA,IAAMK,YAAY,GAAG,GAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASJ,UAAT,CAAoBK,WAApB,EAAiCC,cAAjC,EAAiD;AAC7C,SAAOA,cAAc,CAACC,MAAf,CAAsB,CAAtB,MAA6BH,YAA7B,GACHC,WAAW,CAACG,SAAZ,CAAsBC,cAAc,CAACJ,WAAD,EAAcC,cAAd,CAAd,GAA8C,CAApE,CADG,GAEHD,WAFJ;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,cAAT,CAAwBC,MAAxB,EAAgCT,GAAhC,EAAqC;AACjC;AACJ;AACA;AACA;AACA;AACA;AACI,OAAK,IAAIU,WAAW,GAAG,CAAlB,EAAqBC,QAAQ,GAAG,CAArC,EAAwCD,WAAW,GAAGD,MAAM,CAACP,MAA7D,EAAqEQ,WAAW,IAAIC,QAAQ,EAA5F,EAAgG;AAC5F,QAAIX,GAAG,CAACW,QAAD,CAAH,KAAkB,IAAtB,EAA4B;AACxBA,MAAAA,QAAQ;AACX,KAFD,MAGK,IAAIF,MAAM,CAACC,WAAD,CAAN,KAAwBP,YAA5B,EAA0C;AAC3C,aAAOO,WAAP;AACH;AACJ;;AACD,QAAM,IAAIE,KAAJ,sDAAuDZ,GAAvD,SAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,OAAO,CAACC,SAAR,GAAoBA,SAApB,C,CACA","sourcesContent":["/**\r\n * @license Angular v10.2.3\r\n * (c) 2010-2020 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst __globalThis = typeof globalThis !== 'undefined' && globalThis;\r\nconst __window = typeof window !== 'undefined' && window;\r\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n    self instanceof WorkerGlobalScope && self;\r\nconst __global = typeof global !== 'undefined' && global;\r\n// Always use __globalThis if available; this is the spec-defined global variable across all\r\n// environments.\r\n// Then fallback to __global first; in Node tests both __global and __window may be defined.\r\nconst _global = __globalThis || __global || __window || __self;\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Tag a template literal string for localization.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `some string to localize`\r\n * ```\r\n *\r\n * **Providing meaning, description and id**\r\n *\r\n * You can optionally specify one or more of `meaning`, `description` and `id` for a localized\r\n * string by pre-pending it with a colon delimited block of the form:\r\n *\r\n * ```ts\r\n * $localize`:meaning|description@@id:source message text`;\r\n *\r\n * $localize`:meaning|:source message text`;\r\n * $localize`:description:source message text`;\r\n * $localize`:@@id:source message text`;\r\n * ```\r\n *\r\n * This format is the same as that used for `i18n` markers in Angular templates. See the\r\n * [Angular 18n guide](guide/i18n#template-translations).\r\n *\r\n * **Naming placeholders**\r\n *\r\n * If the template literal string contains expressions, then the expressions will be automatically\r\n * associated with placeholder names for you.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `Hi ${name}! There are ${items.length} items.`;\r\n * ```\r\n *\r\n * will generate a message-source of `Hi {$PH}! There are {$PH_1} items`.\r\n *\r\n * The recommended practice is to name the placeholder associated with each expression though.\r\n *\r\n * Do this by providing the placeholder name wrapped in `:` characters directly after the\r\n * expression. These placeholder names are stripped out of the rendered localized string.\r\n *\r\n * For example, to name the `items.length` expression placeholder `itemCount` you write:\r\n *\r\n * ```ts\r\n * $localize `There are ${items.length}:itemCount: items`;\r\n * ```\r\n *\r\n * **Escaping colon markers**\r\n *\r\n * If you need to use a `:` character directly at the start of a tagged string that has no\r\n * metadata block, or directly after a substitution expression that has no name you must escape\r\n * the `:` by preceding it with a backslash:\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * // message has a metadata block so no need to escape colon\r\n * $localize `:some description::this message starts with a colon (:)`;\r\n * // no metadata block so the colon must be escaped\r\n * $localize `\\:this message starts with a colon (:)`;\r\n * ```\r\n *\r\n * ```ts\r\n * // named substitution so no need to escape colon\r\n * $localize `${label}:label:: ${}`\r\n * // anonymous substitution so colon must be escaped\r\n * $localize `${label}\\: ${}`\r\n * ```\r\n *\r\n * **Processing localized strings:**\r\n *\r\n * There are three scenarios:\r\n *\r\n * * **compile-time inlining**: the `$localize` tag is transformed at compile time by a\r\n * transpiler, removing the tag and replacing the template literal string with a translated\r\n * literal string from a collection of translations provided to the transpilation tool.\r\n *\r\n * * **run-time evaluation**: the `$localize` tag is a run-time function that replaces and\r\n * reorders the parts (static strings and expressions) of the template literal string with strings\r\n * from a collection of translations loaded at run-time.\r\n *\r\n * * **pass-through evaluation**: the `$localize` tag is a run-time function that simply evaluates\r\n * the original template literal string without applying any translations to the parts. This\r\n * version is used during development or where there is no need to translate the localized\r\n * template literals.\r\n * @param messageParts a collection of the static parts of the template string.\r\n * @param expressions a collection of the values of each placeholder in the template string.\r\n * @returns the translated string, with the `messageParts` and `expressions` interleaved together.\r\n */\r\nconst $localize = function (messageParts, ...expressions) {\r\n    if ($localize.translate) {\r\n        // Don't use array expansion here to avoid the compiler adding `__read()` helper unnecessarily.\r\n        const translation = $localize.translate(messageParts, expressions);\r\n        messageParts = translation[0];\r\n        expressions = translation[1];\r\n    }\r\n    let message = stripBlock(messageParts[0], messageParts.raw[0]);\r\n    for (let i = 1; i < messageParts.length; i++) {\r\n        message += expressions[i - 1] + stripBlock(messageParts[i], messageParts.raw[i]);\r\n    }\r\n    return message;\r\n};\r\nconst BLOCK_MARKER = ':';\r\n/**\r\n * Strip a delimited \"block\" from the start of the `messagePart`, if it is found.\r\n *\r\n * If a marker character (:) actually appears in the content at the start of a tagged string or\r\n * after a substitution expression, where a block has not been provided the character must be\r\n * escaped with a backslash, `\\:`. This function checks for this by looking at the `raw`\r\n * messagePart, which should still contain the backslash.\r\n *\r\n * @param messagePart The cooked message part to process.\r\n * @param rawMessagePart The raw message part to check.\r\n * @returns the message part with the placeholder name stripped, if found.\r\n * @throws an error if the block is unterminated\r\n */\r\nfunction stripBlock(messagePart, rawMessagePart) {\r\n    return rawMessagePart.charAt(0) === BLOCK_MARKER ?\r\n        messagePart.substring(findEndOfBlock(messagePart, rawMessagePart) + 1) :\r\n        messagePart;\r\n}\r\n/**\r\n * Find the end of a \"marked block\" indicated by the first non-escaped colon.\r\n *\r\n * @param cooked The cooked string (where escaped chars have been processed)\r\n * @param raw The raw string (where escape sequences are still in place)\r\n *\r\n * @returns the index of the end of block marker\r\n * @throws an error if the block is unterminated\r\n */\r\nfunction findEndOfBlock(cooked, raw) {\r\n    /***********************************************************************************************\r\n     * This function is repeated in `src/utils/messages.ts` and the two should be kept in sync.\r\n     * The reason is that this file is marked as having side-effects, and if we import `messages.ts`\r\n     * into it, the whole of `src/utils` will be included in this bundle and none of the functions\r\n     * will be tree shaken.\r\n     ***********************************************************************************************/\r\n    for (let cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {\r\n        if (raw[rawIndex] === '\\\\') {\r\n            rawIndex++;\r\n        }\r\n        else if (cooked[cookedIndex] === BLOCK_MARKER) {\r\n            return cookedIndex;\r\n        }\r\n    }\r\n    throw new Error(`Unterminated $localize metadata block in \"${raw}\".`);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Attach $localize to the global context, as a side-effect of this module.\r\n_global.$localize = $localize;\r\n//# sourceMappingURL=init.js.map\r\n"]},"metadata":{},"sourceType":"script"}