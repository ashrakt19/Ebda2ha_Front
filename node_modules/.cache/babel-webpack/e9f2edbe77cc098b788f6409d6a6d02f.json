{"ast":null,"code":"import _classCallCheck from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, HostListener, Directive, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar ClipboardService = /*#__PURE__*/function () {\n  function ClipboardService(document, window) {\n    _classCallCheck(this, ClipboardService);\n\n    this.document = document;\n    this.window = window;\n    this.copySubject = new Subject();\n    this.copyResponse$ = this.copySubject.asObservable();\n    this.config = {};\n  }\n\n  _createClass(ClipboardService, [{\n    key: \"configure\",\n    value: function configure(config) {\n      this.config = config;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(content) {\n      if (!this.isSupported || !content) {\n        return this.pushCopyResponse({\n          isSuccess: false,\n          content: content\n        });\n      }\n\n      var copyResult = this.copyFromContent(content);\n\n      if (copyResult) {\n        return this.pushCopyResponse({\n          content: content,\n          isSuccess: copyResult\n        });\n      }\n\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content: content\n      });\n    }\n  }, {\n    key: \"isSupported\",\n    get: function get() {\n      return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n    }\n  }, {\n    key: \"isTargetValid\",\n    value: function isTargetValid(element) {\n      if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n        if (element.hasAttribute('disabled')) {\n          throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n        }\n\n        return true;\n      }\n\n      throw new Error('Target should be input or textarea');\n    }\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\n\n  }, {\n    key: \"copyFromInputElement\",\n    value: function copyFromInputElement(targetElm) {\n      var isFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      try {\n        this.selectTarget(targetElm);\n        var re = this.copyText();\n        this.clearSelection(isFocus ? targetElm : undefined, this.window);\n        return re && this.isCopySuccessInIE11();\n      } catch (error) {\n        return false;\n      }\n    }\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\n\n  }, {\n    key: \"isCopySuccessInIE11\",\n    value: function isCopySuccessInIE11() {\n      var clipboardData = this.window['clipboardData'];\n\n      if (clipboardData && clipboardData.getData) {\n        if (!clipboardData.getData('Text')) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\n\n  }, {\n    key: \"copyFromContent\",\n    value: function copyFromContent(content) {\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.document.body;\n\n      // check if the temp textarea still belongs to the current container.\n      // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n      if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n        this.destroy(this.tempTextArea.parentElement || undefined);\n      }\n\n      if (!this.tempTextArea) {\n        this.tempTextArea = this.createTempTextArea(this.document, this.window);\n\n        try {\n          container.appendChild(this.tempTextArea);\n        } catch (error) {\n          throw new Error('Container should be a Dom element');\n        }\n      }\n\n      this.tempTextArea.value = content;\n      var toReturn = this.copyFromInputElement(this.tempTextArea, false);\n\n      if (this.config.cleanUpAfterCopy) {\n        this.destroy(this.tempTextArea.parentElement || undefined);\n      }\n\n      return toReturn;\n    }\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.document.body;\n\n      if (this.tempTextArea) {\n        container.removeChild(this.tempTextArea); // removeChild doesn't remove the reference from memory\n\n        this.tempTextArea = undefined;\n      }\n    }\n    /**\r\n     * Select the target html input element.\r\n     */\n\n  }, {\n    key: \"selectTarget\",\n    value: function selectTarget(inputElement) {\n      inputElement.select();\n      inputElement.setSelectionRange(0, inputElement.value.length);\n      return inputElement.value.length;\n    }\n  }, {\n    key: \"copyText\",\n    value: function copyText() {\n      return this.document.execCommand('copy');\n    }\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\n\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection(inputElement, window) {\n      var _a;\n\n      inputElement && inputElement.focus();\n      (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n    }\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\n\n  }, {\n    key: \"createTempTextArea\",\n    value: function createTempTextArea(doc, window) {\n      var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n      var ta;\n      ta = doc.createElement('textarea'); // Prevent zooming on iOS\n\n      ta.style.fontSize = '12pt'; // Reset box model\n\n      ta.style.border = '0';\n      ta.style.padding = '0';\n      ta.style.margin = '0'; // Move element out of screen horizontally\n\n      ta.style.position = 'absolute';\n      ta.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically\n\n      var yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n      ta.style.top = yPosition + 'px';\n      ta.setAttribute('readonly', '');\n      return ta;\n    }\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\n\n  }, {\n    key: \"pushCopyResponse\",\n    value: function pushCopyResponse(response) {\n      this.copySubject.next(response);\n    }\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\n\n  }, {\n    key: \"pushCopyReponse\",\n    value: function pushCopyReponse(response) {\n      this.pushCopyResponse(response);\n    }\n  }]);\n\n  return ClipboardService;\n}();\n\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8));\n};\n\nClipboardService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [WINDOW]\n    }]\n  }];\n};\n\nClipboardService.ɵprov = ɵɵdefineInjectable({\n  factory: function ClipboardService_Factory() {\n    return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8));\n  },\n  token: ClipboardService,\n  providedIn: \"root\"\n});\nClipboardService = __decorate([__param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(WINDOW))], ClipboardService);\n\nvar ClipboardDirective = /*#__PURE__*/function () {\n  function ClipboardDirective(clipboardSrv) {\n    _classCallCheck(this, ClipboardDirective);\n\n    this.clipboardSrv = clipboardSrv;\n    this.cbOnSuccess = new EventEmitter();\n    this.cbOnError = new EventEmitter();\n  } // tslint:disable-next-line:no-empty\n\n\n  _createClass(ClipboardDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {}\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.clipboardSrv.destroy(this.container);\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (!this.clipboardSrv.isSupported) {\n        this.handleResult(false, undefined, event);\n      } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n        this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n      } else if (this.cbContent) {\n        this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n      }\n    }\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\n\n  }, {\n    key: \"handleResult\",\n    value: function handleResult(succeeded, copiedContent, event) {\n      var response = {\n        isSuccess: succeeded,\n        event: event\n      };\n\n      if (succeeded) {\n        response = Object.assign(response, {\n          content: copiedContent,\n          successMessage: this.cbSuccessMsg\n        });\n        this.cbOnSuccess.emit(response);\n      } else {\n        this.cbOnError.emit(response);\n      }\n\n      this.clipboardSrv.pushCopyResponse(response);\n    }\n  }]);\n\n  return ClipboardDirective;\n}();\n\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService));\n};\n\nClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"ngxClipboard\", \"\"]],\n  hostBindings: function ClipboardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event.target);\n      });\n    }\n  },\n  inputs: {\n    targetElm: [\"ngxClipboard\", \"targetElm\"],\n    container: \"container\",\n    cbContent: \"cbContent\",\n    cbSuccessMsg: \"cbSuccessMsg\"\n  },\n  outputs: {\n    cbOnSuccess: \"cbOnSuccess\",\n    cbOnError: \"cbOnError\"\n  }\n});\n\nClipboardDirective.ctorParameters = function () {\n  return [{\n    type: ClipboardService\n  }];\n};\n\n__decorate([Input('ngxClipboard')], ClipboardDirective.prototype, \"targetElm\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"container\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"cbContent\", void 0);\n\n__decorate([Input()], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\n\n__decorate([Output()], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\n\n__decorate([Output()], ClipboardDirective.prototype, \"cbOnError\", void 0);\n\n__decorate([HostListener('click', ['$event.target'])], ClipboardDirective.prototype, \"onClick\", null);\n\nvar ClipboardIfSupportedDirective = /*#__PURE__*/function () {\n  function ClipboardIfSupportedDirective(_clipboardService, _viewContainerRef, _templateRef) {\n    _classCallCheck(this, ClipboardIfSupportedDirective);\n\n    this._clipboardService = _clipboardService;\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n\n  _createClass(ClipboardIfSupportedDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this._clipboardService.isSupported) {\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\n      }\n    }\n  }]);\n\n  return ClipboardIfSupportedDirective;\n}();\n\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n  return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nClipboardIfSupportedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardIfSupportedDirective,\n  selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n});\n\nClipboardIfSupportedDirective.ctorParameters = function () {\n  return [{\n    type: ClipboardService\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }];\n};\n\nvar ClipboardModule = function ClipboardModule() {\n  _classCallCheck(this, ClipboardModule);\n};\n\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ClipboardModule_Factory(t) {\n    return new (t || ClipboardModule)();\n  },\n  imports: [[CommonModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboard]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }];\n  }, {\n    cbOnSuccess: [{\n      type: Output\n    }],\n    cbOnError: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event.target']]\n    }],\n    targetElm: [{\n      type: Input,\n      args: ['ngxClipboard']\n    }],\n    container: [{\n      type: Input\n    }],\n    cbContent: [{\n      type: Input\n    }],\n    cbSuccessMsg: [{\n      type: Input\n    }]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboardIfSupported]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: function declarations() {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n      exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService }; //# sourceMappingURL=ngx-clipboard.js.map","map":{"version":3,"sources":["F:/FCIH/Gp/Ebda2ha-Front/node_modules/ngx-clipboard/__ivy_ngcc__/fesm2015/ngx-clipboard.js"],"names":["__decorate","__param","DOCUMENT","CommonModule","Inject","Optional","ɵɵdefineInjectable","ɵɵinject","Injectable","EventEmitter","Input","Output","HostListener","Directive","ViewContainerRef","TemplateRef","NgModule","WINDOW","Subject","ɵngcc0","ClipboardService","document","window","copySubject","copyResponse$","asObservable","config","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","queryCommandSupported","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","copyFromInputElement","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","_a","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","next","ɵfac","ClipboardService_Factory","t","ctorParameters","type","decorators","args","ɵprov","factory","token","providedIn","ClipboardDirective","clipboardSrv","cbOnSuccess","cbOnError","event","handleResult","isTargetValid","cbContent","succeeded","copiedContent","Object","assign","successMessage","cbSuccessMsg","emit","ClipboardDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","ClipboardDirective_HostBindings","rf","ctx","ɵɵlistener","ClipboardDirective_click_HostBindingHandler","$event","onClick","target","inputs","outputs","prototype","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ClipboardIfSupportedDirective_Factory","ClipboardModule","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ClipboardModule_Factory","imports","ɵsetClassMetadata","selector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, HostListener, Directive, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nlet ClipboardService = class ClipboardService {\r\n    constructor(document, window) {\r\n        this.document = document;\r\n        this.window = window;\r\n        this.copySubject = new Subject();\r\n        this.copyResponse$ = this.copySubject.asObservable();\r\n        this.config = {};\r\n    }\r\n    configure(config) {\r\n        this.config = config;\r\n    }\r\n    copy(content) {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n    get isSupported() {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n    isTargetValid(element) {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    copyFromInputElement(targetElm, isFocus = true) {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    copyFromContent(content, container = this.document.body) {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            }\r\n            catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        return toReturn;\r\n    }\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    destroy(container = this.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    selectTarget(inputElement) {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n    copyText() {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    clearSelection(inputElement, window) {\r\n        var _a;\r\n        inputElement && inputElement.focus();\r\n        (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\r\n    }\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    createTempTextArea(doc, window) {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    pushCopyResponse(response) {\r\n        this.copySubject.next(response);\r\n    }\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    pushCopyReponse(response) {\r\n        this.pushCopyResponse(response);\r\n    }\r\n};\nClipboardService.ɵfac = function ClipboardService_Factory(t) { return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8)); };\r\nClipboardService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }\r\n];\r\nClipboardService.ɵprov = ɵɵdefineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\r\nClipboardService = __decorate([ __param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(WINDOW))\r\n], ClipboardService);\n\nlet ClipboardDirective = class ClipboardDirective {\r\n    constructor(clipboardSrv) {\r\n        this.clipboardSrv = clipboardSrv;\r\n        this.cbOnSuccess = new EventEmitter();\r\n        this.cbOnError = new EventEmitter();\r\n    }\r\n    // tslint:disable-next-line:no-empty\r\n    ngOnInit() { }\r\n    ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n    onClick(event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        }\r\n        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        }\r\n        else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    handleResult(succeeded, copiedContent, event) {\r\n        let response = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        }\r\n        else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n};\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService)); };\nClipboardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [[\"\", \"ngxClipboard\", \"\"]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) { return ctx.onClick($event.target); });\n    } }, inputs: { targetElm: [\"ngxClipboard\", \"targetElm\"], container: \"container\", cbContent: \"cbContent\", cbSuccessMsg: \"cbSuccessMsg\" }, outputs: { cbOnSuccess: \"cbOnSuccess\", cbOnError: \"cbOnError\" } });\r\nClipboardDirective.ctorParameters = () => [\r\n    { type: ClipboardService }\r\n];\r\n__decorate([\r\n    Input('ngxClipboard')\r\n], ClipboardDirective.prototype, \"targetElm\", void 0);\r\n__decorate([\r\n    Input()\r\n], ClipboardDirective.prototype, \"container\", void 0);\r\n__decorate([\r\n    Input()\r\n], ClipboardDirective.prototype, \"cbContent\", void 0);\r\n__decorate([\r\n    Input()\r\n], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\r\n__decorate([\r\n    Output()\r\n], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\r\n__decorate([\r\n    Output()\r\n], ClipboardDirective.prototype, \"cbOnError\", void 0);\r\n__decorate([\r\n    HostListener('click', ['$event.target'])\r\n], ClipboardDirective.prototype, \"onClick\", null);\n\nlet ClipboardIfSupportedDirective = class ClipboardIfSupportedDirective {\r\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\r\n        this._clipboardService = _clipboardService;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n    }\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n};\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) { return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nClipboardIfSupportedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClipboardIfSupportedDirective, selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]] });\r\nClipboardIfSupportedDirective.ctorParameters = () => [\r\n    { type: ClipboardService },\r\n    { type: ViewContainerRef },\r\n    { type: TemplateRef }\r\n];\n\nlet ClipboardModule = class ClipboardModule {\r\n};\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); }, imports: [[CommonModule]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [WINDOW]\n            }] }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxClipboard]'\n            }]\n    }], function () { return [{ type: ClipboardService }]; }, { cbOnSuccess: [{\n            type: Output\n        }], cbOnError: [{\n            type: Output\n        }], onClick: [{\n            type: HostListener,\n            args: ['click', ['$event.target']]\n        }], targetElm: [{\n            type: Input,\n            args: ['ngxClipboard']\n        }], container: [{\n            type: Input\n        }], cbContent: [{\n            type: Input\n        }], cbSuccessMsg: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxClipboardIfSupported]'\n            }]\n    }], function () { return [{ type: ClipboardService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: function () { return [ClipboardDirective, ClipboardIfSupportedDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ClipboardDirective, ClipboardIfSupportedDirective]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n                exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n            }]\n    }], null, null); })();\n\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n\n//# sourceMappingURL=ngx-clipboard.js.map"]},"metadata":{},"sourceType":"module"}