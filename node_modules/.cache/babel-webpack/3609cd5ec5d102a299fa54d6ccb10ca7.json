{"ast":null,"code":"import _classCallCheck from \"F:/front/Ebda2ha_Front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/front/Ebda2ha_Front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar MutationObserverFactory = /*#__PURE__*/function () {\n  function MutationObserverFactory() {\n    _classCallCheck(this, MutationObserverFactory);\n  }\n\n  _createClass(MutationObserverFactory, [{\n    key: \"create\",\n    value: function create(callback) {\n      return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n  }]);\n\n  return MutationObserverFactory;\n}();\n\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n  return new (t || MutationObserverFactory)();\n};\n\nMutationObserverFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function MutationObserverFactory_Factory() {\n    return new MutationObserverFactory();\n  },\n  token: MutationObserverFactory,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** An injectable service that allows watching elements for changes to their content. */\n\n\nvar ContentObserver = /*#__PURE__*/function () {\n  function ContentObserver(_mutationObserverFactory) {\n    _classCallCheck(this, ContentObserver);\n\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /** Keeps track of the existing MutationObservers so they can be reused. */\n\n    this._observedElements = new Map();\n  }\n\n  _createClass(ContentObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this = this;\n\n      this._observedElements.forEach(function (_, element) {\n        return _this._cleanupObserver(element);\n      });\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(elementOrRef) {\n      var _this2 = this;\n\n      var element = coerceElement(elementOrRef);\n      return new Observable(function (observer) {\n        var stream = _this2._observeElement(element);\n\n        var subscription = stream.subscribe(observer);\n        return function () {\n          subscription.unsubscribe();\n\n          _this2._unobserveElement(element);\n        };\n      });\n    }\n    /**\r\n     * Observes the given element by using the existing MutationObserver if available, or creating a\r\n     * new one if not.\r\n     */\n\n  }, {\n    key: \"_observeElement\",\n    value: function _observeElement(element) {\n      if (!this._observedElements.has(element)) {\n        var stream = new Subject();\n\n        var observer = this._mutationObserverFactory.create(function (mutations) {\n          return stream.next(mutations);\n        });\n\n        if (observer) {\n          observer.observe(element, {\n            characterData: true,\n            childList: true,\n            subtree: true\n          });\n        }\n\n        this._observedElements.set(element, {\n          observer: observer,\n          stream: stream,\n          count: 1\n        });\n      } else {\n        this._observedElements.get(element).count++;\n      }\n\n      return this._observedElements.get(element).stream;\n    }\n    /**\r\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n     * observing this element.\r\n     */\n\n  }, {\n    key: \"_unobserveElement\",\n    value: function _unobserveElement(element) {\n      if (this._observedElements.has(element)) {\n        this._observedElements.get(element).count--;\n\n        if (!this._observedElements.get(element).count) {\n          this._cleanupObserver(element);\n        }\n      }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n\n  }, {\n    key: \"_cleanupObserver\",\n    value: function _cleanupObserver(element) {\n      if (this._observedElements.has(element)) {\n        var _this$_observedElemen = this._observedElements.get(element),\n            observer = _this$_observedElemen.observer,\n            stream = _this$_observedElemen.stream;\n\n        if (observer) {\n          observer.disconnect();\n        }\n\n        stream.complete();\n\n        this._observedElements.delete(element);\n      }\n    }\n  }]);\n\n  return ContentObserver;\n}();\n\nContentObserver.ɵfac = function ContentObserver_Factory(t) {\n  return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n};\n\nContentObserver.ɵprov = ɵɵdefineInjectable({\n  factory: function ContentObserver_Factory() {\n    return new ContentObserver(ɵɵinject(MutationObserverFactory));\n  },\n  token: ContentObserver,\n  providedIn: \"root\"\n});\n\nContentObserver.ctorParameters = function () {\n  return [{\n    type: MutationObserverFactory\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  }, null);\n})();\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\n\n\nvar CdkObserveContent = /*#__PURE__*/function () {\n  function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n    _classCallCheck(this, CdkObserveContent);\n\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /** Event emitted for each change in the element's content. */\n\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  /**\r\n   * Whether observing content is disabled. This option can be used\r\n   * to disconnect the underlying MutationObserver until it is needed.\r\n   */\n\n\n  _createClass(CdkObserveContent, [{\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n      this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n\n  }, {\n    key: \"debounce\",\n    get: function get() {\n      return this._debounce;\n    },\n    set: function set(value) {\n      this._debounce = coerceNumberProperty(value);\n\n      this._subscribe();\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (!this._currentSubscription && !this.disabled) {\n        this._subscribe();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._unsubscribe();\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe() {\n      var _this3 = this;\n\n      this._unsubscribe();\n\n      var stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n      // Consider brining it back inside the zone next time we're making breaking changes.\n      // Bringing it back inside can cause things like infinite change detection loops and changed\n      // after checked errors if people's code isn't handling it properly.\n\n\n      this._ngZone.runOutsideAngular(function () {\n        _this3._currentSubscription = (_this3.debounce ? stream.pipe(debounceTime(_this3.debounce)) : stream).subscribe(_this3.event);\n      });\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      if (this._currentSubscription) {\n        this._currentSubscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkObserveContent;\n}();\n\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n  return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkObserveContent,\n  selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n  inputs: {\n    disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n    debounce: \"debounce\"\n  },\n  outputs: {\n    event: \"cdkObserveContent\"\n  },\n  exportAs: [\"cdkObserveContent\"]\n});\n\nCdkObserveContent.ctorParameters = function () {\n  return [{\n    type: ContentObserver\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkObserveContent.propDecorators = {\n  event: [{\n    type: Output,\n    args: ['cdkObserveContent']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkObserveContentDisabled']\n  }],\n  debounce: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent'\n    }]\n  }], function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ObserversModule = function ObserversModule() {\n  _classCallCheck(this, ObserversModule);\n};\n\nObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ObserversModule\n});\nObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ObserversModule_Factory(t) {\n    return new (t || ObserversModule)();\n  },\n  providers: [MutationObserverFactory]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n    declarations: [CdkObserveContent],\n    exports: [CdkObserveContent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule }; //# sourceMappingURL=observers.js.map","map":{"version":3,"sources":["F:/front/Ebda2ha_Front/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/observers.js"],"names":["coerceElement","coerceBooleanProperty","coerceNumberProperty","ɵɵdefineInjectable","Injectable","ɵɵinject","EventEmitter","Directive","ElementRef","NgZone","Output","Input","NgModule","Observable","Subject","debounceTime","ɵngcc0","MutationObserverFactory","callback","MutationObserver","ɵfac","MutationObserverFactory_Factory","t","ɵprov","factory","token","providedIn","ɵsetClassMetadata","type","args","ContentObserver","_mutationObserverFactory","_observedElements","Map","forEach","_","element","_cleanupObserver","elementOrRef","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","create","mutations","next","observe","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ctorParameters","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","_disabled","_currentSubscription","value","_unsubscribe","_subscribe","_debounce","disabled","runOutsideAngular","debounce","pipe","CdkObserveContent_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","propDecorators","selector","ObserversModule","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ObserversModule_Factory","providers","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nclass MutationObserverFactory {\r\n    create(callback) {\r\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\r\n    }\r\n}\r\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\r\nMutationObserverFactory.ɵprov = ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], null, null); })();\r\n/** An injectable service that allows watching elements for changes to their content. */\r\nclass ContentObserver {\r\n    constructor(_mutationObserverFactory) {\r\n        this._mutationObserverFactory = _mutationObserverFactory;\r\n        /** Keeps track of the existing MutationObservers so they can be reused. */\r\n        this._observedElements = new Map();\r\n    }\r\n    ngOnDestroy() {\r\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\r\n    }\r\n    observe(elementOrRef) {\r\n        const element = coerceElement(elementOrRef);\r\n        return new Observable((observer) => {\r\n            const stream = this._observeElement(element);\r\n            const subscription = stream.subscribe(observer);\r\n            return () => {\r\n                subscription.unsubscribe();\r\n                this._unobserveElement(element);\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Observes the given element by using the existing MutationObserver if available, or creating a\r\n     * new one if not.\r\n     */\r\n    _observeElement(element) {\r\n        if (!this._observedElements.has(element)) {\r\n            const stream = new Subject();\r\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\r\n            if (observer) {\r\n                observer.observe(element, {\r\n                    characterData: true,\r\n                    childList: true,\r\n                    subtree: true\r\n                });\r\n            }\r\n            this._observedElements.set(element, { observer, stream, count: 1 });\r\n        }\r\n        else {\r\n            this._observedElements.get(element).count++;\r\n        }\r\n        return this._observedElements.get(element).stream;\r\n    }\r\n    /**\r\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\r\n     * observing this element.\r\n     */\r\n    _unobserveElement(element) {\r\n        if (this._observedElements.has(element)) {\r\n            this._observedElements.get(element).count--;\r\n            if (!this._observedElements.get(element).count) {\r\n                this._cleanupObserver(element);\r\n            }\r\n        }\r\n    }\r\n    /** Clean up the underlying MutationObserver for the specified element. */\r\n    _cleanupObserver(element) {\r\n        if (this._observedElements.has(element)) {\r\n            const { observer, stream } = this._observedElements.get(element);\r\n            if (observer) {\r\n                observer.disconnect();\r\n            }\r\n            stream.complete();\r\n            this._observedElements.delete(element);\r\n        }\r\n    }\r\n}\r\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\r\nContentObserver.ɵprov = ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\r\nContentObserver.ctorParameters = () => [\r\n    { type: MutationObserverFactory }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\nclass CdkObserveContent {\r\n    constructor(_contentObserver, _elementRef, _ngZone) {\r\n        this._contentObserver = _contentObserver;\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        /** Event emitted for each change in the element's content. */\r\n        this.event = new EventEmitter();\r\n        this._disabled = false;\r\n        this._currentSubscription = null;\r\n    }\r\n    /**\r\n     * Whether observing content is disabled. This option can be used\r\n     * to disconnect the underlying MutationObserver until it is needed.\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._disabled ? this._unsubscribe() : this._subscribe();\r\n    }\r\n    /** Debounce interval for emitting the changes. */\r\n    get debounce() { return this._debounce; }\r\n    set debounce(value) {\r\n        this._debounce = coerceNumberProperty(value);\r\n        this._subscribe();\r\n    }\r\n    ngAfterContentInit() {\r\n        if (!this._currentSubscription && !this.disabled) {\r\n            this._subscribe();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._unsubscribe();\r\n    }\r\n    _subscribe() {\r\n        this._unsubscribe();\r\n        const stream = this._contentObserver.observe(this._elementRef);\r\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\r\n        // Consider brining it back inside the zone next time we're making breaking changes.\r\n        // Bringing it back inside can cause things like infinite change detection loops and changed\r\n        // after checked errors if people's code isn't handling it properly.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._currentSubscription =\r\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\r\n        });\r\n    }\r\n    _unsubscribe() {\r\n        if (this._currentSubscription) {\r\n            this._currentSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\r\nCdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\r\nCdkObserveContent.ctorParameters = () => [\r\n    { type: ContentObserver },\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\nCdkObserveContent.propDecorators = {\r\n    event: [{ type: Output, args: ['cdkObserveContent',] }],\r\n    disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\r\n    debounce: [{ type: Input }]\r\n};\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkObserveContent]',\r\n                exportAs: 'cdkObserveContent'\r\n            }]\r\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\r\n            type: Output,\r\n            args: ['cdkObserveContent']\r\n        }], disabled: [{\r\n            type: Input,\r\n            args: ['cdkObserveContentDisabled']\r\n        }], debounce: [{\r\n            type: Input\r\n        }] }); })();\r\nclass ObserversModule {\r\n}\r\nObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\r\nObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ObserversModule_Factory(t) { return new (t || ObserversModule)(); }, providers: [MutationObserverFactory] });\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: [CdkObserveContent],\r\n                declarations: [CdkObserveContent],\r\n                providers: [MutationObserverFactory]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\r\n\r\n//# sourceMappingURL=observers.js.map"]},"metadata":{},"sourceType":"module"}