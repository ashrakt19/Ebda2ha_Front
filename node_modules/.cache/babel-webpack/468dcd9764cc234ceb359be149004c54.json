{"ast":null,"code":"import _toConsumableArray from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\nvar _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n  }\n}\n\nvar _c1 = [\"*\"];\nvar _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nvar MatAutocompleteSelectedEvent = function MatAutocompleteSelectedEvent(\n/** Reference to the autocomplete panel that emitted the event. */\nsource,\n/** Option that was selected. */\noption) {\n  _classCallCheck(this, MatAutocompleteSelectedEvent);\n\n  this.source = source;\n  this.option = option;\n}; // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nvar MatAutocompleteBase = function MatAutocompleteBase() {\n  _classCallCheck(this, MatAutocompleteBase);\n};\n\nvar _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nvar MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nvar _MatAutocompleteBase = /*#__PURE__*/function (_MatAutocompleteMixin) {\n  _inherits(_MatAutocompleteBase, _MatAutocompleteMixin);\n\n  var _super = _createSuper(_MatAutocompleteBase);\n\n  function _MatAutocompleteBase(_changeDetectorRef, _elementRef, defaults) {\n    var _this;\n\n    _classCallCheck(this, _MatAutocompleteBase);\n\n    _this = _super.call(this);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._elementRef = _elementRef;\n    _this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n\n    _this.showPanel = false;\n    _this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n\n    _this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n\n    _this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n\n    _this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n\n    _this.closed = new EventEmitter();\n    /** Emits whenever an option is activated using the keyboard. */\n\n    _this.optionActivated = new EventEmitter();\n    _this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n    _this.id = \"mat-autocomplete-\".concat(_uniqueAutocompleteIdCounter++);\n    _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    return _this;\n  }\n  /** Whether the autocomplete panel is open. */\n\n\n  _createClass(_MatAutocompleteBase, [{\n    key: \"isOpen\",\n    get: function get() {\n      return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n\n  }, {\n    key: \"autoActiveFirstOption\",\n    get: function get() {\n      return this._autoActiveFirstOption;\n    },\n    set: function set(value) {\n      this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n\n  }, {\n    key: \"classList\",\n    set: function set(value) {\n      if (value && value.length) {\n        this._classList = value.split(' ').reduce(function (classList, className) {\n          classList[className.trim()] = true;\n          return classList;\n        }, {});\n      } else {\n        this._classList = {};\n      }\n\n      this._setVisibilityClasses(this._classList);\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n      this._activeOptionChanges = this._keyManager.change.subscribe(function (index) {\n        _this2.optionActivated.emit({\n          source: _this2,\n          option: _this2.options.toArray()[index] || null\n        });\n      }); // Set the initial visibility state.\n\n      this._setVisibility();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n\n  }, {\n    key: \"_setScrollTop\",\n    value: function _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /** Returns the panel's scrollTop. */\n\n  }, {\n    key: \"_getScrollTop\",\n    value: function _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n\n  }, {\n    key: \"_setVisibility\",\n    value: function _setVisibility() {\n      this.showPanel = !!this.options.length;\n\n      this._setVisibilityClasses(this._classList);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n\n  }, {\n    key: \"_emitSelectEvent\",\n    value: function _emitSelectEvent(option) {\n      var event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n  }, {\n    key: \"_setVisibilityClasses\",\n    value: function _setVisibilityClasses(classList) {\n      classList[this._visibleClass] = this.showPanel;\n      classList[this._hiddenClass] = !this.showPanel;\n    }\n  }]);\n\n  return _MatAutocompleteBase;\n}(_MatAutocompleteMixinBase);\n\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n  return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS));\n};\n\n_MatAutocompleteBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteBase,\n  viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  inputs: {\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\",\n    optionActivated: \"optionActivated\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n_MatAutocompleteBase.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n_MatAutocompleteBase.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  optionActivated: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatAutocomplete = /*#__PURE__*/function (_MatAutocompleteBase2) {\n  _inherits(MatAutocomplete, _MatAutocompleteBase2);\n\n  var _super2 = _createSuper(MatAutocomplete);\n\n  function MatAutocomplete() {\n    var _this3;\n\n    _classCallCheck(this, MatAutocomplete);\n\n    _this3 = _super2.apply(this, arguments);\n    _this3._visibleClass = 'mat-autocomplete-visible';\n    _this3._hiddenClass = 'mat-autocomplete-hidden';\n    return _this3;\n  }\n\n  return MatAutocomplete;\n}(_MatAutocompleteBase);\n\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) {\n  return ɵMatAutocomplete_BaseFactory(t || MatAutocomplete);\n};\n\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    }\n  },\n  directives: [ɵngcc1.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatAutocomplete.propDecorators = {\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }]\n};\nvar ɵMatAutocomplete_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nvar _MatAutocompleteOriginBase = function _MatAutocompleteOriginBase(\n/** Reference to the element on which the directive is applied. */\nelementRef) {\n  _classCallCheck(this, _MatAutocompleteOriginBase);\n\n  this.elementRef = elementRef;\n};\n\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n  return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\n_MatAutocompleteOriginBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteOriginBase\n});\n\n_MatAutocompleteOriginBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nvar MatAutocompleteOrigin = /*#__PURE__*/function (_MatAutocompleteOrigi) {\n  _inherits(MatAutocompleteOrigin, _MatAutocompleteOrigi);\n\n  var _super3 = _createSuper(MatAutocompleteOrigin);\n\n  function MatAutocompleteOrigin() {\n    _classCallCheck(this, MatAutocompleteOrigin);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return MatAutocompleteOrigin;\n}(_MatAutocompleteOriginBase);\n\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) {\n  return ɵMatAutocompleteOrigin_BaseFactory(t || MatAutocompleteOrigin);\n};\n\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatAutocompleteOrigin_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\n\n\nvar AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\n\nvar AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\nvar MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatAutocompleteTrigger;\n  }),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nvar _MatAutocompleteTriggerBase = /*#__PURE__*/function () {\n  function _MatAutocompleteTriggerBase(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n    var _this4 = this;\n\n    _classCallCheck(this, _MatAutocompleteTriggerBase);\n\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = function () {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      _this4._canOpenOnNextFocus = _this4._document.activeElement !== _this4._element.nativeElement || _this4.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n\n\n    this._onChange = function () {};\n    /** `View -> model callback called when autocomplete has been touched` */\n\n\n    this._onTouched = function () {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n\n\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of autocomplete option selections. */\n\n    this.optionSelections = defer(function () {\n      if (_this4.autocomplete && _this4.autocomplete.options) {\n        return merge.apply(void 0, _toConsumableArray(_this4.autocomplete.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return _this4._zone.onStable.pipe(take(1), switchMap(function () {\n        return _this4.optionSelections;\n      }));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n\n\n  _createClass(_MatAutocompleteTriggerBase, [{\n    key: \"autocompleteDisabled\",\n    get: function get() {\n      return this._autocompleteDisabled;\n    },\n    set: function set(value) {\n      this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this5 = this;\n\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        this._zone.runOutsideAngular(function () {\n          return window.addEventListener('blur', _this5._windowBlurHandler);\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['position'] && this._positionStrategy) {\n        this._setStrategyPositions(this._positionStrategy);\n\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('blur', this._windowBlurHandler);\n      }\n\n      this._viewportSubscription.unsubscribe();\n\n      this._componentDestroyed = true;\n\n      this._destroyPanel();\n\n      this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n\n  }, {\n    key: \"openPanel\",\n    value: function openPanel() {\n      this._attachOverlay();\n\n      this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n\n  }, {\n    key: \"closePanel\",\n    value: function closePanel() {\n      this._resetLabel();\n\n      if (!this._overlayAttached) {\n        return;\n      }\n\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        this.autocomplete.closed.emit();\n      }\n\n      this.autocomplete._isOpen = this._overlayAttached = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n\n        this._closingActionsSubscription.unsubscribe();\n      } // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (this._overlayAttached) {\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n\n  }, {\n    key: \"panelClosingActions\",\n    get: function get() {\n      var _this6 = this;\n\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(function () {\n        return _this6._overlayAttached;\n      })), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(function () {\n        return _this6._overlayAttached;\n      })) : of()).pipe( // Normalize the output so we return a consistent type.\n      map(function (event) {\n        return event instanceof MatOptionSelectionChange ? event : null;\n      }));\n    }\n    /** The currently active option, coerced to MatOption type. */\n\n  }, {\n    key: \"activeOption\",\n    get: function get() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n\n      return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n\n  }, {\n    key: \"_getOutsideClickStream\",\n    value: function _getOutsideClickStream() {\n      var _this7 = this;\n\n      return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend')).pipe(filter(function (event) {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        var clickTarget = _this7._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] : event.target;\n        var formField = _this7._formField ? _this7._formField._elementRef.nativeElement : null;\n        var customOrigin = _this7.connectedTo ? _this7.connectedTo.elementRef.nativeElement : null;\n        return _this7._overlayAttached && clickTarget !== _this7._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!_this7._overlayRef && !_this7._overlayRef.overlayElement.contains(clickTarget);\n      }));\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      var _this8 = this;\n\n      Promise.resolve(null).then(function () {\n        return _this8._setTriggerValue(value);\n      });\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      var keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n\n      if (keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n      }\n\n      if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n        this.activeOption._selectViaInteraction();\n\n        this._resetActiveItem();\n\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        var prevActiveItem = this.autocomplete._keyManager.activeItem;\n        var isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n        if (this.panelOpen || keyCode === TAB) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this.openPanel();\n        }\n\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n        }\n      }\n    }\n  }, {\n    key: \"_handleInput\",\n    value: function _handleInput(event) {\n      var target = event.target;\n      var value = target.value; // Based on `NumberValueAccessor` from forms.\n\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      } // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n      if (this._previousValue !== value) {\n        this._previousValue = value;\n\n        this._onChange(value);\n\n        if (this._canOpen() && this._document.activeElement === event.target) {\n          this.openPanel();\n        }\n      }\n    }\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n\n        this._attachOverlay();\n\n        this._floatLabel(true);\n      }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n\n  }, {\n    key: \"_floatLabel\",\n    value: function _floatLabel() {\n      var shouldAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n\n  }, {\n    key: \"_resetLabel\",\n    value: function _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        this._formField.floatLabel = 'auto';\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n\n  }, {\n    key: \"_subscribeToClosingActions\",\n    value: function _subscribeToClosingActions() {\n      var _this9 = this;\n\n      var firstStable = this._zone.onStable.pipe(take(1));\n\n      var optionChanges = this.autocomplete.options.changes.pipe(tap(function () {\n        return _this9._positionStrategy.reapplyLastPosition();\n      }), // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)); // When the zone is stable initially, and when the option list changes...\n\n      return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(function () {\n        var wasOpen = _this9.panelOpen;\n\n        _this9._resetActiveItem();\n\n        _this9.autocomplete._setVisibility();\n\n        if (_this9.panelOpen) {\n          _this9._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n          // event, because we may not have emitted it when the panel was attached. This\n          // can happen if the users opens the panel and there are no options, but the\n          // options come in slightly later or as a result of the value changing.\n\n\n          if (wasOpen !== _this9.panelOpen) {\n            _this9.autocomplete.opened.emit();\n          }\n        }\n\n        return _this9.panelClosingActions;\n      }), // when the first closing event occurs...\n      take(1)) // set the value, close the panel, and complete.\n      .subscribe(function (event) {\n        return _this9._setValueAndClose(event);\n      });\n    }\n    /** Destroys the autocomplete suggestion panel. */\n\n  }, {\n    key: \"_destroyPanel\",\n    value: function _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n    }\n  }, {\n    key: \"_setTriggerValue\",\n    value: function _setTriggerValue(value) {\n      var toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n      // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n      var inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n\n      if (this._formField) {\n        this._formField._control.value = inputValue;\n      } else {\n        this._element.nativeElement.value = inputValue;\n      }\n\n      this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n\n  }, {\n    key: \"_setValueAndClose\",\n    value: function _setValueAndClose(event) {\n      if (event && event.source) {\n        this._clearPreviousSelectedOption(event.source);\n\n        this._setTriggerValue(event.source.value);\n\n        this._onChange(event.source.value);\n\n        this._element.nativeElement.focus();\n\n        this.autocomplete._emitSelectEvent(event.source);\n      }\n\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n\n  }, {\n    key: \"_clearPreviousSelectedOption\",\n    value: function _clearPreviousSelectedOption(skip) {\n      this.autocomplete.options.forEach(function (option) {\n        if (option !== skip && option.selected) {\n          option.deselect();\n        }\n      });\n    }\n  }, {\n    key: \"_attachOverlay\",\n    value: function _attachOverlay() {\n      var _this10 = this;\n\n      if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatAutocompleteMissingPanelError();\n      } // We want to resolve this once, as late as possible so that we can be\n      // sure that the element has been moved into its final place in the DOM.\n\n\n      if (this._isInsideShadowRoot == null) {\n        this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n      }\n\n      var overlayRef = this._overlayRef;\n\n      if (!overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n        overlayRef = this._overlay.create(this._getOverlayConfig());\n        this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n\n        overlayRef.keydownEvents().subscribe(function (event) {\n          // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n          // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n          if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n            _this10._resetActiveItem();\n\n            _this10._closeKeyEventStream.next(); // We need to stop propagation, otherwise the event will eventually\n            // reach the input itself and cause the overlay to be reopened.\n\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        });\n        this._viewportSubscription = this._viewportRuler.change().subscribe(function () {\n          if (_this10.panelOpen && overlayRef) {\n            overlayRef.updateSize({\n              width: _this10._getPanelWidth()\n            });\n          }\n        });\n      } else {\n        // Update the trigger, panel width and direction, in case anything has changed.\n        this._positionStrategy.setOrigin(this._getConnectedElement());\n\n        overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n\n      if (overlayRef && !overlayRef.hasAttached()) {\n        overlayRef.attach(this._portal);\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n\n      var wasOpen = this.panelOpen;\n\n      this.autocomplete._setVisibility();\n\n      this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this.autocomplete.opened.emit();\n      }\n    }\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir\n      });\n    }\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      var strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n      this._setStrategyPositions(strategy);\n\n      this._positionStrategy = strategy;\n      return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n\n  }, {\n    key: \"_setStrategyPositions\",\n    value: function _setStrategyPositions(positionStrategy) {\n      // Note that we provide horizontal fallback positions, even though by default the dropdown\n      // width matches the input, because consumers can override the width. See #18854.\n      var belowPositions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }]; // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n\n      var panelClass = this._aboveClass;\n      var abovePositions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass: panelClass\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        panelClass: panelClass\n      }];\n      var positions;\n\n      if (this.position === 'above') {\n        positions = abovePositions;\n      } else if (this.position === 'below') {\n        positions = belowPositions;\n      } else {\n        positions = [].concat(belowPositions, abovePositions);\n      }\n\n      positionStrategy.withPositions(positions);\n    }\n  }, {\n    key: \"_getConnectedElement\",\n    value: function _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n  }, {\n    key: \"_getPanelWidth\",\n    value: function _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n\n  }, {\n    key: \"_getHostWidth\",\n    value: function _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n\n  }, {\n    key: \"_resetActiveItem\",\n    value: function _resetActiveItem() {\n      this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /** Determines whether the panel can be opened. */\n\n  }, {\n    key: \"_canOpen\",\n    value: function _canOpen() {\n      var element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      var _a;\n\n      return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n\n  }, {\n    key: \"_scrollToOption\",\n    value: function _scrollToOption(index) {\n      // Given that we are not actually focusing active options, we must manually adjust scroll\n      // to reveal options below the fold. First, we find the offset of the option from the top\n      // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n      // the panel height + the option height, so the active option will be just visible at the\n      // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n      // will become the offset. If that offset is visible within the panel already, the scrollTop is\n      // not adjusted.\n      var autocomplete = this.autocomplete;\n\n      var labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        autocomplete._setScrollTop(0);\n      } else {\n        var option = autocomplete.options.toArray()[index];\n\n        if (option) {\n          var element = option._getHostElement();\n\n          var newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n          autocomplete._setScrollTop(newScrollPosition);\n        }\n      }\n    }\n  }]);\n\n  return _MatAutocompleteTriggerBase;\n}();\n\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n  return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler));\n};\n\n_MatAutocompleteTriggerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteTriggerBase,\n  inputs: {\n    position: [\"matAutocompletePosition\", \"position\"],\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n_MatAutocompleteTriggerBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Overlay\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }, {\n      type: Host\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: ViewportRuler\n  }];\n};\n\n_MatAutocompleteTriggerBase.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  position: [{\n    type: Input,\n    args: ['matAutocompletePosition']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc4.ViewportRuler\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\n\nvar MatAutocompleteTrigger = /*#__PURE__*/function (_MatAutocompleteTrigg) {\n  _inherits(MatAutocompleteTrigger, _MatAutocompleteTrigg);\n\n  var _super4 = _createSuper(MatAutocompleteTrigger);\n\n  function MatAutocompleteTrigger() {\n    var _this11;\n\n    _classCallCheck(this, MatAutocompleteTrigger);\n\n    _this11 = _super4.apply(this, arguments);\n    _this11._aboveClass = 'mat-autocomplete-panel-above';\n    return _this11;\n  }\n\n  return MatAutocompleteTrigger;\n}(_MatAutocompleteTriggerBase);\n\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) {\n  return ɵMatAutocompleteTrigger_BaseFactory(t || MatAutocompleteTrigger);\n};\n\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostAttrs: [1, \"mat-autocomplete-trigger\"],\n  hostVars: 7,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    }\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatAutocompleteTrigger_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matAutocomplete], textarea[matAutocomplete]\",\n      host: {\n        'class': 'mat-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': '!autocompleteDisabled',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatAutocompleteModule = function MatAutocompleteModule() {\n  _classCallCheck(this, MatAutocompleteModule);\n};\n\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatAutocompleteModule_Factory(t) {\n    return new (t || MatAutocompleteModule)();\n  },\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function declarations() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function imports() {\n      return [OverlayModule, MatOptionModule, MatCommonModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError }; //# sourceMappingURL=autocomplete.js.map","map":{"version":3,"sources":["F:/FCIH/Gp/Ebda2ha-Front/node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"names":["ActiveDescendantKeyManager","coerceBooleanProperty","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","_getShadowRoot","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵproperty","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_autoActiveFirstOption","value","length","split","reduce","classList","className","trim","_setVisibilityClasses","nativeElement","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","markForCheck","event","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵstaticViewQuery","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","static","ɵsetClassMetadata","MatAutocomplete","arguments","MatAutocomplete_Factory","ɵMatAutocomplete_BaseFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","directives","NgClass","styles","encapsulation","changeDetection","descendants","ɵɵgetInheritedFactory","selector","None","OnPush","host","providers","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","MatAutocompleteOrigin_Factory","ɵMatAutocompleteOrigin_BaseFactory","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","_getOutsideClickStream","detachments","activeItem","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","activeItemIndex","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","ngDevMode","overlayRef","_portal","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","panelClass","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","_a","defaultView","labelCount","_setScrollTop","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_getScrollTop","_MatAutocompleteTriggerBase_Factory","autocompleteDisabled","ɵɵNgOnChangesFeature","MatAutocompleteTrigger_Factory","ɵMatAutocompleteTrigger_BaseFactory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","ɵɵattribute","toString","MatAutocompleteModule","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","MatAutocompleteModule_Factory","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\n_MatAutocompleteBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return ɵMatAutocomplete_BaseFactory(t || MatAutocomplete); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\nconst ɵMatAutocomplete_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return ɵMatAutocompleteOrigin_BaseFactory(t || MatAutocompleteOrigin); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteOrigin_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 11.0.0\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler)); };\n_MatAutocompleteTriggerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc4.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return ɵMatAutocompleteTrigger_BaseFactory(t || MatAutocompleteTrigger); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteTrigger_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map"]},"metadata":{},"sourceType":"module"}