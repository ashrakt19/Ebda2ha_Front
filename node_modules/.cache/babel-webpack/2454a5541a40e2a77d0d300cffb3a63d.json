{"ast":null,"code":"import _createClass from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"F:/FCIH/Gp/Ebda2ha-Front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n\n/** @docs-private */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nvar _c1 = [\"*\", \"mat-toolbar-row\"];\n\nvar MatToolbarBase = function MatToolbarBase(_elementRef) {\n  _classCallCheck(this, MatToolbarBase);\n\n  this._elementRef = _elementRef;\n};\n\nvar _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\nvar MatToolbarRow = function MatToolbarRow() {\n  _classCallCheck(this, MatToolbarRow);\n};\n\nMatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) {\n  return new (t || MatToolbarRow)();\n};\n\nMatToolbarRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatToolbarRow,\n  selectors: [[\"mat-toolbar-row\"]],\n  hostAttrs: [1, \"mat-toolbar-row\"],\n  exportAs: [\"matToolbarRow\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatToolbarRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-toolbar-row',\n      exportAs: 'matToolbarRow',\n      host: {\n        'class': 'mat-toolbar-row'\n      }\n    }]\n  }], null, null);\n})();\n\nvar MatToolbar = /*#__PURE__*/function (_MatToolbarMixinBase2) {\n  _inherits(MatToolbar, _MatToolbarMixinBase2);\n\n  var _super = _createSuper(MatToolbar);\n\n  function MatToolbar(elementRef, _platform, document) {\n    var _this;\n\n    _classCallCheck(this, MatToolbar);\n\n    _this = _super.call(this, elementRef);\n    _this._platform = _platform; // TODO: make the document a required param when doing breaking changes.\n\n    _this._document = document;\n    return _this;\n  }\n\n  _createClass(MatToolbar, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (this._platform.isBrowser) {\n        this._checkToolbarMixedModes();\n\n        this._toolbarRows.changes.subscribe(function () {\n          return _this2._checkToolbarMixedModes();\n        });\n      }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n\n  }, {\n    key: \"_checkToolbarMixedModes\",\n    value: function _checkToolbarMixedModes() {\n      var _this3 = this;\n\n      if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(function (node) {\n          return !(node.classList && node.classList.contains('mat-toolbar-row'));\n        }).filter(function (node) {\n          return node.nodeType !== (_this3._document ? _this3._document.COMMENT_NODE : 8);\n        }).some(function (node) {\n          return !!(node.textContent && node.textContent.trim());\n        });\n\n        if (isCombinedUsage) {\n          throwToolbarMixedModesError();\n        }\n      }\n    }\n  }]);\n\n  return MatToolbar;\n}(_MatToolbarMixinBase);\n\nMatToolbar.ɵfac = function MatToolbar_Factory(t) {\n  return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatToolbar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatToolbar,\n  selectors: [[\"mat-toolbar\"]],\n  contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-toolbar\"],\n  hostVars: 4,\n  hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  exportAs: [\"matToolbar\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 0,\n  template: function MatToolbar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵprojection(1, 1);\n    }\n  },\n  styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatToolbar.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatToolbar.propDecorators = {\n  _toolbarRows: [{\n    type: ContentChildren,\n    args: [MatToolbarRow, {\n      descendants: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatToolbar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-toolbar',\n      exportAs: 'matToolbar',\n      template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n      inputs: ['color'],\n      host: {\n        'class': 'mat-toolbar',\n        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    _toolbarRows: [{\n      type: ContentChildren,\n      args: [MatToolbarRow, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\n\n\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatToolbarModule = function MatToolbarModule() {\n  _classCallCheck(this, MatToolbarModule);\n};\n\nMatToolbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatToolbarModule\n});\nMatToolbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatToolbarModule_Factory(t) {\n    return new (t || MatToolbarModule)();\n  },\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, {\n    declarations: function declarations() {\n      return [MatToolbar, MatToolbarRow];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatToolbar, MatToolbarRow, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatToolbarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n      declarations: [MatToolbar, MatToolbarRow]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError }; //# sourceMappingURL=toolbar.js.map","map":{"version":3,"sources":["F:/FCIH/Gp/Ebda2ha-Front/node_modules/@angular/material/__ivy_ngcc__/fesm2015/toolbar.js"],"names":["Directive","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Inject","ContentChildren","NgModule","mixinColor","MatCommonModule","Platform","DOCUMENT","ɵngcc0","ɵngcc1","_c0","_c1","MatToolbarBase","_elementRef","_MatToolbarMixinBase","MatToolbarRow","ɵfac","MatToolbarRow_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","exportAs","ɵsetClassMetadata","args","selector","host","MatToolbar","elementRef","_platform","document","_document","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","ngDevMode","isCombinedUsage","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","MatToolbar_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","contentQueries","MatToolbar_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostVars","hostBindings","MatToolbar_HostBindings","ɵɵclassProp","inputs","color","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatToolbar_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","propDecorators","descendants","OnPush","None","Error","MatToolbarModule","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","factory","MatToolbarModule_Factory","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\n\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\nclass MatToolbarBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nclass MatToolbarRow {\n}\nMatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) { return new (t || MatToolbarRow)(); };\nMatToolbarRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatToolbarRow, selectors: [[\"mat-toolbar-row\"]], hostAttrs: [1, \"mat-toolbar-row\"], exportAs: [\"matToolbarRow\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbarRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-toolbar-row',\n                exportAs: 'matToolbarRow',\n                host: { 'class': 'mat-toolbar-row' }\n            }]\n    }], null, null); })();\nclass MatToolbar extends _MatToolbarMixinBase {\n    constructor(elementRef, _platform, document) {\n        super(elementRef);\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n}\nMatToolbar.ɵfac = function MatToolbar_Factory(t) { return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatToolbar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatToolbar, selectors: [[\"mat-toolbar\"]], contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n    } }, hostAttrs: [1, \"mat-toolbar\"], hostVars: 4, hostBindings: function MatToolbar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n    } }, inputs: { color: \"color\" }, exportAs: [\"matToolbar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatToolbar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatToolbar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatToolbar.propDecorators = {\n    _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-toolbar',\n                exportAs: 'matToolbar',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-toolbar',\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { _toolbarRows: [{\n            type: ContentChildren,\n            args: [MatToolbarRow, { descendants: true }]\n        }] }); })();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatToolbarModule {\n}\nMatToolbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatToolbarModule });\nMatToolbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatToolbarModule_Factory(t) { return new (t || MatToolbarModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, { declarations: function () { return [MatToolbar, MatToolbarRow]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatToolbar, MatToolbarRow, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                declarations: [MatToolbar, MatToolbarRow]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n\n//# sourceMappingURL=toolbar.js.map"]},"metadata":{},"sourceType":"module"}